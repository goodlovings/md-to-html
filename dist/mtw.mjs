const $ = "data:text/css;base64,", bb = "data:text/css;base64,", Zb = "data:text/css;base64,", ib = "data:text/css;base64,Lm1hcmtkb3duLWJvZHkgcHJlLAoubWFya2Rvd24tYm9keSBwcmUgPiBjb2RlLmhsanMgewogIGNvbG9yOiAjMzMzOwogIGJhY2tncm91bmQ6ICNmOGY4Zjg7Cn0KLmhsanMtY29tbWVudCwKLmhsanMtcXVvdGUgewogIGNvbG9yOiAjOTk4OwogIGZvbnQtc3R5bGU6IGl0YWxpYzsKfQouaGxqcy1rZXl3b3JkLAouaGxqcy1zZWxlY3Rvci10YWcsCi5obGpzLXN1YnN0IHsKICBjb2xvcjogIzMzMzsKICBmb250LXdlaWdodDogNzAwOwp9Ci5obGpzLWxpdGVyYWwsCi5obGpzLW51bWJlciwKLmhsanMtdGFnIC5obGpzLWF0dHIsCi5obGpzLXRlbXBsYXRlLXZhcmlhYmxlLAouaGxqcy12YXJpYWJsZSB7CiAgY29sb3I6IHRlYWw7Cn0KLmhsanMtZG9jdGFnLAouaGxqcy1zdHJpbmcgewogIGNvbG9yOiAjZDE0Owp9Ci5obGpzLXNlY3Rpb24sCi5obGpzLXNlbGVjdG9yLWlkLAouaGxqcy10aXRsZSB7CiAgY29sb3I6ICM5MDA7CiAgZm9udC13ZWlnaHQ6IDcwMDsKfQouaGxqcy1zdWJzdCB7CiAgZm9udC13ZWlnaHQ6IDQwMDsKfQouaGxqcy1jbGFzcyAuaGxqcy10aXRsZSwKLmhsanMtdHlwZSB7CiAgY29sb3I6ICM0NTg7CiAgZm9udC13ZWlnaHQ6IDcwMDsKfQouaGxqcy1hdHRyaWJ1dGUsCi5obGpzLW5hbWUsCi5obGpzLXRhZyB7CiAgY29sb3I6IG5hdnk7CiAgZm9udC13ZWlnaHQ6IDQwMDsKfQouaGxqcy1saW5rLAouaGxqcy1yZWdleHAgewogIGNvbG9yOiAjMDA5OTI2Owp9Ci5obGpzLWJ1bGxldCwKLmhsanMtc3ltYm9sIHsKICBjb2xvcjogIzk5MDA3MzsKfQouaGxqcy1idWlsdF9pbiwKLmhsanMtYnVpbHRpbi1uYW1lIHsKICBjb2xvcjogIzAwODZiMzsKfQouaGxqcy1tZXRhIHsKICBjb2xvcjogIzk5OTsKICBmb250LXdlaWdodDogNzAwOwp9Ci5obGpzLWRlbGV0aW9uIHsKICBiYWNrZ3JvdW5kOiAjZmRkOwp9Ci5obGpzLWFkZGl0aW9uIHsKICBiYWNrZ3JvdW5kOiAjZGZkOwp9Ci5obGpzLWVtcGhhc2lzIHsKICBmb250LXN0eWxlOiBpdGFsaWM7Cn0KLmhsanMtc3Ryb25nIHsKICBmb250LXdlaWdodDogNzAwOwp9Cg==", gb = "data:text/css;base64,QGNoYXJzZXQgIlVURi04IjsKLm1hcmtkb3duLWJvZHkgewogIGxpbmUtaGVpZ2h0OiAxLjc1OwogIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLWZvbnQsIEJsaW5rTWFjU3lzdGVtRm9udCwgSGVsdmV0aWNhIE5ldWUsCiAgICBQaW5nRmFuZyBTQywgSGlyYWdpbm8gU2FucyBHQiwgTWljcm9zb2Z0IFlhSGVpIFVJLCBNaWNyb3NvZnQgWWFIZWksIEFyaWFsLAogICAgc2Fucy1zZXJpZjsKICBsZXR0ZXItc3BhY2luZzogMnB4OwogIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgKICAgICAgOTBkZWcsCiAgICAgIHJnYmEoNTAsIDAsIDAsIDAuMDUpIDMlLAogICAgICB0cmFuc3BhcmVudCAwCiAgICApLAogICAgbGluZWFyLWdyYWRpZW50KDF0dXJuLCByZ2JhKDUwLCAwLCAwLCAwLjA1KSAzJSwgdHJhbnNwYXJlbnQgMCk7CiAgYmFja2dyb3VuZC1zaXplOiAyMHB4IDIwcHg7CiAgYmFja2dyb3VuZC1wb3NpdGlvbjogNTAlOwogIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7CiAgZm9udC13ZWlnaHQ6IDQwMDsKICBmb250LXNpemU6IDE1cHg7CiAgb3ZlcmZsb3cteDogaGlkZGVuOwogIGNvbG9yOiAjMzMzOwp9Ci5tYXJrZG93bi1ib2R5IGgxIHsKICBmb250LXNpemU6IDIzcHg7CiAgbWFyZ2luLWJvdHRvbTogNXB4OwogIGZvbnQtd2VpZ2h0OiA3MDA7CiAgcGFkZGluZy1sZWZ0OiAxMHB4OwogIGJvcmRlci1sZWZ0OiA1cHggc29saWQgIzc3MzA5ODsKfQoubWFya2Rvd24tYm9keSBoMiB7CiAgZm9udC1zaXplOiAxOXB4OwogIGZvbnQtd2VpZ2h0OiA3MDA7CiAgcGFkZGluZy1sZWZ0OiAxMHB4OwogIGJvcmRlci1sZWZ0OiA1cHggc29saWQgIzkxNmRkNTsKfQoubWFya2Rvd24tYm9keSBoMyB7CiAgZm9udC1zaXplOiAxN3B4OwogIGZvbnQtd2VpZ2h0OiA3MDA7CiAgcGFkZGluZy1sZWZ0OiAxMHB4OwogIGJvcmRlci1sZWZ0OiA1cHggc29saWQgI2Q4OWNmNjsKfQoubWFya2Rvd24tYm9keSBoNCB7CiAgZm9udC1zaXplOiAxNnB4Owp9Ci5tYXJrZG93bi1ib2R5IGg1IHsKICBmb250LXNpemU6IDE1cHg7Cn0KLm1hcmtkb3duLWJvZHkgaDYgewogIGZvbnQtc2l6ZTogMTRweDsKICBtYXJnaW4tdG9wOiA1cHg7Cn0KLm1hcmtkb3duLWJvZHkgcCB7CiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7CiAgbWFyZ2luLXRvcDogMjJweDsKICBtYXJnaW4tYm90dG9tOiAyMnB4Owp9Ci5tYXJrZG93bi1ib2R5IGltZyB7CiAgZGlzcGxheTogYmxvY2s7CiAgbWF4LXdpZHRoOiAxMDAlOwogIG1hcmdpbjogMWVtIDA7CiAgYm9yZGVyLXJhZGl1czogNnB4OwogIGJveC1zaGFkb3c6IDJweCA0cHggN3B4ICM5OTk7CiAgdXNlci1zZWxlY3Q6IG5vbmU7Cn0KLm1hcmtkb3duLWJvZHkgaHIgewogIGJvcmRlcjogbm9uZTsKICBib3JkZXItdG9wOiAxcHggc29saWQgI2RkZDsKICBtYXJnaW4tdG9wOiAzMnB4OwogIG1hcmdpbi1ib3R0b206IDMycHg7Cn0KLm1hcmtkb3duLWJvZHkgY29kZSB7CiAgcGFkZGluZzogMC4yZW0gMC41ZW07CiAgZm9udC13ZWlnaHQ6IDcwMDsKICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbS1mb250LCBCbGlua01hY1N5c3RlbUZvbnQsIEhlbHZldGljYSBOZXVlLAogICAgUGluZ0ZhbmcgU0MsIEhpcmFnaW5vIFNhbnMgR0IsIE1pY3Jvc29mdCBZYUhlaSBVSSwgTWljcm9zb2Z0IFlhSGVpLCBBcmlhbCwKICAgIHNhbnMtc2VyaWY7CiAgZm9udC1zaXplOiAxZW07CiAgY29sb3I6ICM5MTZkZDU7CiAgd29yZC1icmVhazogYnJlYWstd29yZDsKICBvdmVyZmxvdy14OiBhdXRvOwogIGJhY2tncm91bmQtY29sb3I6IG5vbmU7CiAgYm9yZGVyLXJhZGl1czogMnB4Owp9Ci5tYXJrZG93bi1ib2R5IHByZSB7CiAgb3ZlcmZsb3c6IGF1dG87CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIGxpbmUtaGVpZ2h0OiAxLjc1Owp9Ci5tYXJrZG93bi1ib2R5IHByZSA+IGNvZGUgewogIGRpc3BsYXk6IGJsb2NrOwogIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLWZvbnQsIEJsaW5rTWFjU3lzdGVtRm9udCwgSGVsdmV0aWNhIE5ldWUsCiAgICBQaW5nRmFuZyBTQywgSGlyYWdpbm8gU2FucyBHQiwgTWljcm9zb2Z0IFlhSGVpIFVJLCBNaWNyb3NvZnQgWWFIZWksIEFyaWFsLAogICAgc2Fucy1zZXJpZjsKICBmb250LXdlaWdodDogNDAwOwogIGZvbnQtc2l6ZTogMC45ZW07CiAgcGFkZGluZzogMTZweCAxMnB4OwogIG1hcmdpbjogMDsKICBjb2xvcjogIzMzMzsKICB3b3JkLWJyZWFrOiBub3JtYWw7CiAgb3ZlcmZsb3cteDogYXV0bzsKICBiYWNrZ3JvdW5kOiAjZjhmOGY4OwogIHNjcm9sbC1iZWhhdmlvcjogc21vb3RoOwp9Ci5tYXJrZG93bi1ib2R5IGEgewogIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICBjb2xvcjogIzkxNmRkNTsKICBmb250LXdlaWdodDogNzAwOwogIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTE2ZGQ1Owp9Ci5tYXJrZG93bi1ib2R5IGE6YWN0aXZlLAoubWFya2Rvd24tYm9keSBhOmhvdmVyIHsKICBjb2xvcjogIzc3MzA5ODsKfQoubWFya2Rvd24tYm9keSB0YWJsZSB7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrICFpbXBvcnRhbnQ7CiAgZm9udC1zaXplOiAxNHB4OwogIHdpZHRoOiBhdXRvOwogIG1heC13aWR0aDogMTAwJTsKICBvdmVyZmxvdzogYXV0bzsKICBib3JkZXI6IDFweCBzb2xpZCAjOTE2ZGQ1OwogIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7Cn0KLm1hcmtkb3duLWJvZHkgdGhlYWQgewogIGJhY2tncm91bmQtY29sb3I6ICM5MTZkZDU7CiAgY29sb3I6ICNmZmY7CiAgdGV4dC1hbGlnbjogbGVmdDsKfQoubWFya2Rvd24tYm9keSB0ZCwKLm1hcmtkb3duLWJvZHkgdGggewogIHBhZGRpbmc6IDEycHggN3B4OwogIGxpbmUtaGVpZ2h0OiAyNHB4OwogIGJvcmRlcjogMXB4IHNvbGlkICM5MTZkZDU7Cn0KLm1hcmtkb3duLWJvZHkgdGQgewogIG1pbi13aWR0aDogMTIwcHg7Cn0KLm1hcmtkb3duLWJvZHkgYmxvY2txdW90ZSB7CiAgY29sb3I6ICM2NjY7CiAgcGFkZGluZzogMXB4IDIzcHg7CiAgbWFyZ2luOiAyMnB4IDA7CiAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAjZDg5Y2Y2OwogIGJhY2tncm91bmQtY29sb3I6ICNmNGVlZmY7Cn0KLm1hcmtkb3duLWJvZHkgYmxvY2txdW90ZTphZnRlciB7CiAgZGlzcGxheTogYmxvY2s7CiAgY29udGVudDogIiI7Cn0KLm1hcmtkb3duLWJvZHkgYmxvY2txdW90ZSA+IHAgewogIG1hcmdpbjogMTBweCAwOwogIGxpbmUtaGVpZ2h0OiAyNnB4Owp9Ci5tYXJrZG93bi1ib2R5IG9sLAoubWFya2Rvd24tYm9keSB1bCB7CiAgcGFkZGluZy1sZWZ0OiAyOHB4OwogIGxpc3Qtc3R5bGUtdHlwZTogY2lyY2xlOwp9Ci5tYXJrZG93bi1ib2R5IG9sIGxpLAoubWFya2Rvd24tYm9keSB1bCBsaSB7CiAgbWFyZ2luLWJvdHRvbTogMDsKICBsaXN0LXN0eWxlOiBpbmhlcml0Owp9Ci5tYXJrZG93bi1ib2R5IG9sIGxpIC50YXNrLWxpc3QtaXRlbSwKLm1hcmtkb3duLWJvZHkgdWwgbGkgLnRhc2stbGlzdC1pdGVtIHsKICBsaXN0LXN0eWxlOiBub25lOwp9Ci5tYXJrZG93bi1ib2R5IG9sIGxpIC50YXNrLWxpc3QtaXRlbSBvbCwKLm1hcmtkb3duLWJvZHkgb2wgbGkgLnRhc2stbGlzdC1pdGVtIHVsLAoubWFya2Rvd24tYm9keSB1bCBsaSAudGFzay1saXN0LWl0ZW0gb2wsCi5tYXJrZG93bi1ib2R5IHVsIGxpIC50YXNrLWxpc3QtaXRlbSB1bCB7CiAgbWFyZ2luLXRvcDogMDsKfQoubWFya2Rvd24tYm9keSBvbCBvbCwKLm1hcmtkb3duLWJvZHkgb2wgdWwsCi5tYXJrZG93bi1ib2R5IHVsIG9sLAoubWFya2Rvd24tYm9keSB1bCB1bCB7CiAgbWFyZ2luLXRvcDogM3B4Owp9Ci5tYXJrZG93bi1ib2R5IG9sIGxpIHsKICBwYWRkaW5nLWxlZnQ6IDZweDsKfQoubWFya2Rvd24tYm9keSBiLAoubWFya2Rvd24tYm9keSBzdHJvbmcgewogIGNvbG9yOiAjOTE2ZGQ1OwogIGZvbnQtd2VpZ2h0OiA3MDA7Cn0KLm1hcmtkb3duLWJvZHkgYjpiZWZvcmUsCi5tYXJrZG93bi1ib2R5IHN0cm9uZzpiZWZvcmUgewogIGNvbnRlbnQ6ICLjgIwiOwp9Ci5tYXJrZG93bi1ib2R5IGI6YWZ0ZXIsCi5tYXJrZG93bi1ib2R5IHN0cm9uZzphZnRlciB7CiAgY29udGVudDogIuOAjSI7Cn0KLm1hcmtkb3duLWJvZHkgZW0sCi5tYXJrZG93bi1ib2R5IGkgewogIGNvbG9yOiAjOTE2ZGQ1Owp9CkBtZWRpYSAobWF4LXdpZHRoOiA3MjBweCkgewogIC5tYXJrZG93bi1ib2R5IGgxIHsKICAgIGZvbnQtc2l6ZTogMjRweDsKICB9CiAgLm1hcmtkb3duLWJvZHkgaDIgewogICAgZm9udC1zaXplOiAyMHB4OwogIH0KICAubWFya2Rvd24tYm9keSBoMyB7CiAgICBmb250LXNpemU6IDE4cHg7CiAgfQp9Cg==", Wb = "data:text/css;base64,", Ib = "data:text/css;base64,Lm1hcmtkb3duLWJvZHkgcHJlLAoubWFya2Rvd24tYm9keSBwcmUgPiBjb2RlLmhsanMgewogIGNvbG9yOiAjMzMzOwogIGJhY2tncm91bmQ6ICNmOGY4Zjg7Cn0KLmhsanMtY29tbWVudCwKLmhsanMtcXVvdGUgewogIGNvbG9yOiAjOTk4OwogIGZvbnQtc3R5bGU6IGl0YWxpYzsKfQouaGxqcy1rZXl3b3JkLAouaGxqcy1zZWxlY3Rvci10YWcsCi5obGpzLXN1YnN0IHsKICBjb2xvcjogIzMzMzsKICBmb250LXdlaWdodDogNzAwOwp9Ci5obGpzLWxpdGVyYWwsCi5obGpzLW51bWJlciwKLmhsanMtdGFnIC5obGpzLWF0dHIsCi5obGpzLXRlbXBsYXRlLXZhcmlhYmxlLAouaGxqcy12YXJpYWJsZSB7CiAgY29sb3I6IHRlYWw7Cn0KLmhsanMtZG9jdGFnLAouaGxqcy1zdHJpbmcgewogIGNvbG9yOiAjZDE0Owp9Ci5obGpzLXNlY3Rpb24sCi5obGpzLXNlbGVjdG9yLWlkLAouaGxqcy10aXRsZSB7CiAgY29sb3I6ICM5MDA7CiAgZm9udC13ZWlnaHQ6IDcwMDsKfQouaGxqcy1zdWJzdCB7CiAgZm9udC13ZWlnaHQ6IDQwMDsKfQouaGxqcy1jbGFzcyAuaGxqcy10aXRsZSwKLmhsanMtdHlwZSB7CiAgY29sb3I6ICM0NTg7CiAgZm9udC13ZWlnaHQ6IDcwMDsKfQouaGxqcy1hdHRyaWJ1dGUsCi5obGpzLW5hbWUsCi5obGpzLXRhZyB7CiAgY29sb3I6IG5hdnk7CiAgZm9udC13ZWlnaHQ6IDQwMDsKfQouaGxqcy1saW5rLAouaGxqcy1yZWdleHAgewogIGNvbG9yOiAjMDA5OTI2Owp9Ci5obGpzLWJ1bGxldCwKLmhsanMtc3ltYm9sIHsKICBjb2xvcjogIzk5MDA3MzsKfQouaGxqcy1idWlsdF9pbiwKLmhsanMtYnVpbHRpbi1uYW1lIHsKICBjb2xvcjogIzAwODZiMzsKfQouaGxqcy1tZXRhIHsKICBjb2xvcjogIzk5OTsKICBmb250LXdlaWdodDogNzAwOwp9Ci5obGpzLWRlbGV0aW9uIHsKICBiYWNrZ3JvdW5kOiAjZmRkOwp9Ci5obGpzLWFkZGl0aW9uIHsKICBiYWNrZ3JvdW5kOiAjZGZkOwp9Ci5obGpzLWVtcGhhc2lzIHsKICBmb250LXN0eWxlOiBpdGFsaWM7Cn0KLmhsanMtc3Ryb25nIHsKICBmb250LXdlaWdodDogNzAwOwp9Cg==", db = "data:text/css;base64,Lm1hcmtkb3duLWJvZHkgewogIGNvbG9yOiAjMzgzODM4OwogIGZvbnQtc2l6ZTogMTVweDsKICBsaW5lLWhlaWdodDogMzBweDsKICBsZXR0ZXItc3BhY2luZzogMnB4OwogIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7CiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgU2Vnb2UgVUksIFJvYm90bywgT3h5Z2VuLAogICAgVWJ1bnR1LCBDYW50YXJlbGwsIE9wZW4gU2FucywgSGVsdmV0aWNhIE5ldWUsIHNhbnMtc2VyaWY7CiAgc2Nyb2xsLWJlaGF2aW9yOiBzbW9vdGg7CiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KAogICAgICAwZGVnLAogICAgICB0cmFuc3BhcmVudCAyNCUsCiAgICAgIHJnYmEoMjAxLCAxOTUsIDE5NSwgMC4zMjkpIDI1JSwKICAgICAgaHNsYSgwLCA4JSwgODAuNCUsIDAuMDUpIDI2JSwKICAgICAgdHJhbnNwYXJlbnQgMjclLAogICAgICB0cmFuc3BhcmVudCA3NCUsCiAgICAgIGhzbGEoMCwgNS4yJSwgODElLCAwLjE4NSkgNzUlLAogICAgICByZ2JhKDE4MCwgMTc2LCAxNzYsIDAuMDUpIDc2JSwKICAgICAgdHJhbnNwYXJlbnQgNzclLAogICAgICB0cmFuc3BhcmVudAogICAgKSwKICAgIGxpbmVhci1ncmFkaWVudCgKICAgICAgOTBkZWcsCiAgICAgIHRyYW5zcGFyZW50IDI0JSwKICAgICAgcmdiYSgyMDQsIDE5NiwgMTk2LCAwLjIyNikgMjUlLAogICAgICBoc2xhKDAsIDQlLCA2Ni4xJSwgMC4wNSkgMjYlLAogICAgICB0cmFuc3BhcmVudCAyNyUsCiAgICAgIHRyYW5zcGFyZW50IDc0JSwKICAgICAgaHNsYSgwLCA1LjIlLCA4MSUsIDAuMTg1KSA3NSUsCiAgICAgIHJnYmEoMTgwLCAxNzYsIDE3NiwgMC4wNSkgNzYlLAogICAgICB0cmFuc3BhcmVudCA3NyUsCiAgICAgIHRyYW5zcGFyZW50CiAgICApOwogIGJhY2tncm91bmQtY29sb3I6ICNmZmY7CiAgYmFja2dyb3VuZC1zaXplOiA1MHB4IDUwcHg7CiAgcGFkZGluZy1ib3R0b206IDYwcHg7Cn0KLm1hcmtkb3duLWJvZHkgOjpzZWxlY3Rpb24gewogIGNvbG9yOiAjZmZmOwogIGJhY2tncm91bmQtY29sb3I6ICNhODYyZWE7Cn0KLm1hcmtkb3duLWJvZHkgaDEsCi5tYXJrZG93bi1ib2R5IGgyLAoubWFya2Rvd24tYm9keSBoMywKLm1hcmtkb3duLWJvZHkgaDQsCi5tYXJrZG93bi1ib2R5IGg1LAoubWFya2Rvd24tYm9keSBoNiB7CiAgbWFyZ2luOiAyNHB4IDAgMTJweDsKICBjb2xvcjogI2E4NjJlYTsKfQoubWFya2Rvd24tYm9keSBoMSB7CiAgbGluZS1oZWlnaHQ6IDI7CiAgZm9udC1zaXplOiAxLjRlbTsKfQoubWFya2Rvd24tYm9keSBoMSB+IHA6Zmlyc3Qtb2YtdHlwZTpmaXJzdC1sZXR0ZXIgewogIGNvbG9yOiAjYTg2MmVhOwogIGZsb2F0OiBsZWZ0OwogIGZvbnQtc2l6ZTogMmVtOwogIG1hcmdpbi1yaWdodDogMC40ZW07CiAgZm9udC13ZWlnaHQ6IGJvbGRlcjsKfQoubWFya2Rvd24tYm9keSBoMiB7CiAgZm9udC1zaXplOiAxLjJlbTsKfQoubWFya2Rvd24tYm9keSBoMyB7CiAgZm9udC1zaXplOiAxLjFlbTsKfQoubWFya2Rvd24tYm9keSBvbCwKLm1hcmtkb3duLWJvZHkgdWwgewogIHBhZGRpbmctbGVmdDogMmVtOwp9Ci5tYXJrZG93bi1ib2R5IG9sIGxpLAoubWFya2Rvd24tYm9keSB1bCBsaSB7CiAgbWFyZ2luLWJvdHRvbTogMDsKICBwYWRkaW5nLWxlZnQ6IDAuMmVtOwp9Ci5tYXJrZG93bi1ib2R5IG9sIGxpOjptYXJrZXIsCi5tYXJrZG93bi1ib2R5IHVsIGxpOjptYXJrZXIgewogIGNvbG9yOiAjYTg2MmVhOwp9Ci5tYXJrZG93bi1ib2R5IG9sIGxpLnRhc2stbGlzdC1pdGVtLAoubWFya2Rvd24tYm9keSB1bCBsaS50YXNrLWxpc3QtaXRlbSB7CiAgbGlzdC1zdHlsZTogbm9uZTsKfQoubWFya2Rvd24tYm9keSBvbCBsaS50YXNrLWxpc3QtaXRlbSBvbCwKLm1hcmtkb3duLWJvZHkgb2wgbGkudGFzay1saXN0LWl0ZW0gdWwsCi5tYXJrZG93bi1ib2R5IHVsIGxpLnRhc2stbGlzdC1pdGVtIG9sLAoubWFya2Rvd24tYm9keSB1bCBsaS50YXNrLWxpc3QtaXRlbSB1bCB7CiAgbWFyZ2luLXRvcDogMDsKfQoubWFya2Rvd24tYm9keSBvbCBvbCwKLm1hcmtkb3duLWJvZHkgb2wgdWwsCi5tYXJrZG93bi1ib2R5IHVsIG9sLAoubWFya2Rvd24tYm9keSB1bCB1bCB7CiAgbWFyZ2luLXRvcDogMTBweDsKfQoubWFya2Rvd24tYm9keSBhLAoubWFya2Rvd24tYm9keSBjb2RlLAoubWFya2Rvd24tYm9keSBoMSwKLm1hcmtkb3duLWJvZHkgaDIsCi5tYXJrZG93bi1ib2R5IGgzLAoubWFya2Rvd24tYm9keSBoNCwKLm1hcmtkb3duLWJvZHkgaDUsCi5tYXJrZG93bi1ib2R5IGg2LAoubWFya2Rvd24tYm9keSBsaSwKLm1hcmtkb3duLWJvZHkgcCB7CiAgb3BhY2l0eTogMC44NTsKICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7CiAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZTsKfQoubWFya2Rvd24tYm9keSBhOmhvdmVyLAoubWFya2Rvd24tYm9keSBjb2RlOmhvdmVyLAoubWFya2Rvd24tYm9keSBoMTpob3ZlciwKLm1hcmtkb3duLWJvZHkgaDI6aG92ZXIsCi5tYXJrZG93bi1ib2R5IGgzOmhvdmVyLAoubWFya2Rvd24tYm9keSBoNDpob3ZlciwKLm1hcmtkb3duLWJvZHkgaDU6aG92ZXIsCi5tYXJrZG93bi1ib2R5IGg2OmhvdmVyLAoubWFya2Rvd24tYm9keSBsaTpob3ZlciwKLm1hcmtkb3duLWJvZHkgcDpob3ZlciB7CiAgb3BhY2l0eTogMTsKfQoubWFya2Rvd24tYm9keSBhIHsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgY29sb3I6ICNhODYyZWE7CiAgY3Vyc29yOiBwb2ludGVyOwogIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KLm1hcmtkb3duLWJvZHkgYTphZnRlciB7CiAgY29udGVudDogIiI7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHdpZHRoOiA5OCU7CiAgaGVpZ2h0OiAxcHg7CiAgYm90dG9tOiAwOwogIGxlZnQ6IDA7CiAgdHJhbnNmb3JtOiBzY2FsZVgoMCk7CiAgYmFja2dyb3VuZC1jb2xvcjogI2E4NjJlYTsKICB0cmFuc2Zvcm0tb3JpZ2luOiBib3R0b20gcmlnaHQ7CiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuM3MgZWFzZS1pbi1vdXQ7Cn0KLm1hcmtkb3duLWJvZHkgYTpob3ZlcjphZnRlciB7CiAgdHJhbnNmb3JtOiBzY2FsZVgoMSk7CiAgdHJhbnNmb3JtLW9yaWdpbjogYm90dG9tIGxlZnQ7Cn0KLm1hcmtkb3duLWJvZHkgYTphY3RpdmUsCi5tYXJrZG93bi1ib2R5IGE6bGluayB7CiAgY29sb3I6ICNhODYyZWE7Cn0KLm1hcmtkb3duLWJvZHkgaW1nIHsKICBtYXgtd2lkdGg6IDEwMCU7CiAgdXNlci1zZWxlY3Q6IG5vbmU7CiAgbWFyZ2luOiAxZW0gMDsKICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4ycyBlYXNlIDBzOwogIGJhY2tncm91bmQtY29sb3I6ICNmOGY1ZmY7CiAgYm94LXNoYWRvdzogMCAwIDEwcHggI2U3ZGFmZjsKfQoubWFya2Rvd24tYm9keSBpbWc6aG92ZXIgewogIG9wYWNpdHk6IDE7CiAgYm94LXNoYWRvdzogMCAwIDIwcHggI2U3ZGFmZjsKICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTFweCk7Cn0KLm1hcmtkb3duLWJvZHkgYmxvY2txdW90ZSB7CiAgcGFkZGluZzogMC41ZW0gMWVtOwogIG1hcmdpbjogMTJweCAwOwogIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDJweDsKICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAycHg7CiAgYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAjYTg2MmVhOwogIGJhY2tncm91bmQtY29sb3I6ICNmOGY1ZmY7Cn0KLm1hcmtkb3duLWJvZHkgYmxvY2txdW90ZSA+IHAgewogIG1hcmdpbjogMDsKfQoubWFya2Rvd24tYm9keSAubWF0aCB7CiAgZm9udC1zdHlsZTogaXRhbGljOwogIG1hcmdpbjogMTJweCAwOwogIHBhZGRpbmc6IDAuNWVtIDFlbTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmNWZmOwp9Ci5tYXJrZG93bi1ib2R5IC5tYXRoID4gcCB7CiAgbWFyZ2luOiAwOwp9Ci5tYXJrZG93bi1ib2R5IGNvZGUgewogIHBhZGRpbmc6IDJweCAwLjRlbTsKICBvdmVyZmxvdy14OiBhdXRvOwogIGNvbG9yOiAjYTg2MmVhOwogIGZvbnQtd2VpZ2h0OiA3MDA7CiAgd29yZC1icmVhazogYnJlYWstd29yZDsKICBmb250LWZhbWlseTogT3BlcmF0b3IgTW9ubywgQ29uc29sYXMsIE1vbmFjbywgTWVubG8sIG1vbm9zcGFjZTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmNWZmOwp9Ci5tYXJrZG93bi1ib2R5IHByZSB7CiAgbWFyZ2luOiAyZW0gMDsKfQoubWFya2Rvd24tYm9keSBwcmUgPiBjb2RlIHsKICBkaXNwbGF5OiBibG9jazsKICBwYWRkaW5nOiAxLjVlbTsKICB3b3JkLWJyZWFrOiBub3JtYWw7CiAgZm9udC1zaXplOiAwLjllbTsKICBmb250LXN0eWxlOiBub3JtYWw7CiAgZm9udC13ZWlnaHQ6IDQwMDsKICBmb250LWZhbWlseTogT3BlcmF0b3IgTW9ubywgQ29uc29sYXMsIE1vbmFjbywgTWVubG8sIG1vbm9zcGFjZTsKICBsaW5lLWhlaWdodDogMThweDsKICBjb2xvcjogIzM4MzgzODsKICBib3JkZXItcmFkaXVzOiAycHg7CiAgc2Nyb2xsLWJlaGF2aW9yOiBzbW9vdGg7CiAgYm94LXNoYWRvdzogMCAwIDEwcHggI2U3ZGFmZjsKfQoubWFya2Rvd24tYm9keSBwcmUgPiBjb2RlOmhvdmVyIHsKICBib3gtc2hhZG93OiAwIDAgMjBweCAjZTdkYWZmOwp9Ci5tYXJrZG93bi1ib2R5IHByZSA+IGNvZGU6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICBoZWlnaHQ6IDZweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmNWZmOwp9Ci5tYXJrZG93bi1ib2R5IHByZSA+IGNvZGU6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTdkYWZmOwogIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDNweDsKICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogM3B4Owp9Ci5tYXJrZG93bi1ib2R5IGhyIHsKICBtYXJnaW46IDJlbSAwOwogIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYTg2MmVhOwp9Ci5tYXJrZG93bi1ib2R5IHRhYmxlIHsKICB3aWR0aDogMTAwJTsKICBmb250LXNpemU6IDEycHg7CiAgbWF4LXdpZHRoOiAxMDAlOwogIG92ZXJmbG93OiBhdXRvOwogIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7Cn0KLm1hcmtkb3duLWJvZHkgdGhlYWQgewogIGNvbG9yOiAjYTg2MmVhOwogIGJhY2tncm91bmQ6ICNmOGY1ZmY7Cn0KLm1hcmtkb3duLWJvZHkgdGQsCi5tYXJrZG93bi1ib2R5IHRoIHsKICBwYWRkaW5nOiAwLjVlbTsKICBib3JkZXI6IDFweCBzb2xpZCAjZTdkYWZmOwp9Ci5tYXJrZG93bi1ib2R5IHRyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmNWZmOwp9CkBtZWRpYSAobWF4LXdpZHRoOiA3MjBweCkgewogIC5tYXJrZG93bi1ib2R5IHsKICAgIGZvbnQtc2l6ZTogMTJweDsKICB9Cn0K", lb = "data:text/css;base64,", mb = "data:text/css;base64,", tb = "data:text/css;base64,QGNoYXJzZXQgIlVURi04IjsKLm1hcmtkb3duLWJvZHkgewogIGZvbnQtZmFtaWx5OiBQaW5nRmFuZyBTQywgTWljcm9zb2Z0IFlhSGVpLCBzYW5zLXNlcmlmOwogIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7CiAgZm9udC1zaXplOiAxNnB4OwogIG92ZXJmbG93LXg6IGhpZGRlbjsKfQoubWFya2Rvd24tYm9keSBsaSwKLm1hcmtkb3duLWJvZHkgcCB7CiAgZm9udC1zaXplOiAwLjllbTsKICBsZXR0ZXItc3BhY2luZzogMnB4OwogIGNvbG9yOiAjMzMzOwp9Ci5tYXJrZG93bi1ib2R5IGxpIGNvZGUsCi5tYXJrZG93bi1ib2R5IHAgY29kZSB7CiAgZm9udC1mYW1pbHk6IFBpbmdGYW5nIFNDLCBNaWNyb3NvZnQgWWFIZWksIHNhbnMtc2VyaWY7CiAgZm9udC13ZWlnaHQ6IDUwMDsKICBiYWNrZ3JvdW5kOiByZ2JhKDExOSwgMTc1LCAxNTYsIDAuMjIpOwogIGJvcmRlci1yYWRpdXM6IDA7CiAgcGFkZGluZzogMnB4IDVweDsKICBib3JkZXItbGVmdDogMnB4IHNvbGlkICM3N2FmOWM7CiAgY29sb3I6ICM2ZTc3ODM7Cn0KLm1hcmtkb3duLWJvZHkgaDEsCi5tYXJrZG93bi1ib2R5IGgyLAoubWFya2Rvd24tYm9keSBoMywKLm1hcmtkb3duLWJvZHkgaDQsCi5tYXJrZG93bi1ib2R5IGg1LAoubWFya2Rvd24tYm9keSBoNiB7CiAgZGlzcGxheTogdGFibGU7CiAgbGluZS1oZWlnaHQ6IDEuNTsKICBtYXJnaW4tdG9wOiAzNXB4OwogIG1hcmdpbi1ib3R0b206IDEwcHg7CiAgcGFkZGluZy1ib3R0b206IDVweDsKfQoubWFya2Rvd24tYm9keSBoMSwKLm1hcmtkb3duLWJvZHkgaDIsCi5tYXJrZG93bi1ib2R5IGgzIHsKICBiYWNrZ3JvdW5kOiByZ2JhKDExOSwgMTc1LCAxNTYsIDAuMjIpOwogIGNvbG9yOiAjNmU3NzgzOwogIHBhZGRpbmc6IDVweCAxMHB4OwogIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMTE5LCAxNzUsIDE1NiwgMC4yMik7CiAgdHJhbnNpdGlvbjogYWxsIDAuNXM7Cn0KLm1hcmtkb3duLWJvZHkgaDE6aG92ZXIsCi5tYXJrZG93bi1ib2R5IGgyOmhvdmVyLAoubWFya2Rvd24tYm9keSBoMzpob3ZlciB7CiAgYm9yZGVyOiAxcHggc29saWQgIzc3YWY5YzsKfQoubWFya2Rvd24tYm9keSBoMSB7CiAgZm9udC1zaXplOiAxLjZlbTsKfQoubWFya2Rvd24tYm9keSBoMiB7CiAgZm9udC1zaXplOiAxLjRlbTsKfQoubWFya2Rvd24tYm9keSBoMyB7CiAgZm9udC1zaXplOiAxLjFlbTsKfQoubWFya2Rvd24tYm9keSBoNCwKLm1hcmtkb3duLWJvZHkgaDUsCi5tYXJrZG93bi1ib2R5IGg2IHsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KLm1hcmtkb3duLWJvZHkgaDQ6YWZ0ZXIsCi5tYXJrZG93bi1ib2R5IGg1OmFmdGVyLAoubWFya2Rvd24tYm9keSBoNjphZnRlciB7CiAgY29udGVudDogIi8iOwogIGNvbG9yOiAjNzdhZjljOwogIGZvbnQtd2VpZ2h0OiA0MDA7CiAgbWFyZ2luLWxlZnQ6IDE1cHg7Cn0KLm1hcmtkb3duLWJvZHkgaDQ6YmVmb3JlLAoubWFya2Rvd24tYm9keSBoNTpiZWZvcmUsCi5tYXJrZG93bi1ib2R5IGg2OmJlZm9yZSB7CiAgY29udGVudDogIi8iOwogIGNvbG9yOiAjNzdhZjljOwogIGZvbnQtd2VpZ2h0OiA0MDA7CiAgbWFyZ2luLXJpZ2h0OiAxNXB4Owp9Ci5tYXJrZG93bi1ib2R5IGg0LAoubWFya2Rvd24tYm9keSBoNSwKLm1hcmtkb3duLWJvZHkgaDYgewogIGRpc3BsYXk6IGJsb2NrOwogIGNvbG9yOiAjNzdhZjljOwogIGZvbnQtc2l6ZTogNDAwOwogIGZvbnQtd2VpZ2h0OiA0MDA7Cn0KLm1hcmtkb3duLWJvZHkgaHIgewogIG1hcmdpbi10b3A6IDIwcHg7CiAgbWFyZ2luLWJvdHRvbTogMjBweDsKICBib3JkZXI6IG5vbmU7CiAgYm9yZGVyLXRvcDogMnB4IHNvbGlkICM3N2FmOWM7Cn0KLm1hcmtkb3duLWJvZHkgYmxvY2txdW90ZSB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIGxpbmUtaGVpZ2h0OiAxLjg7CiAgZm9udC1zdHlsZTogNDAwOwogIHRleHQtaW5kZW50OiAwOwogIG1hcmdpbjogMDsKICBwYWRkaW5nOiAxMHB4OwogIGJvcmRlcjogMXB4IHNvbGlkICNmZmY7CiAgY29sb3I6ICM4ODg7CiAgYmFja2dyb3VuZDogcmdiYSgxMTksIDE3NSwgMTU2LCAwLjIyKTsKICB0cmFuc2l0aW9uOiBib3JkZXIgMC41czsKfQoubWFya2Rvd24tYm9keSBibG9ja3F1b3RlOmhvdmVyIHsKICBib3JkZXItc3R5bGU6IHNvbGlkOwogIGJvcmRlci1jb2xvcjogIzc3YWY5YzsKfQoubWFya2Rvd24tYm9keSBibG9ja3F1b3RlOmJlZm9yZSB7CiAgY29udGVudDogIuKAnCI7CiAgZGlzcGxheTogaW5saW5lOwogIGNvbG9yOiAjNmU3NzgzOwogIGZvbnQtc2l6ZTogNGVtOwogIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2VyaWY7CiAgbGluZS1oZWlnaHQ6IDFlbTsKfQoubWFya2Rvd24tYm9keSBibG9ja3F1b3RlOmFmdGVyIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgY29udGVudDogIlRpcHMiOwogIGRpc3BsYXk6IGlubGluZTsKICBib3R0b206IDVweDsKICByaWdodDogMTVweDsKICBjb2xvcjogIzZlNzc4MzsKICBmb250LXNpemU6IDAuOWVtOwp9Ci5tYXJrZG93bi1ib2R5IGJsb2NrcXVvdGUgcCB7CiAgZGlzcGxheTogaW5saW5lOwp9Ci5tYXJrZG93bi1ib2R5IHRhYmxlIHsKICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOwogIHdpZHRoOiBhdXRvOwogIG1pbi13aWR0aDogNTAlOwogIGZvbnQtc2l6ZTogMC44ZW07Cn0KLm1hcmtkb3duLWJvZHkgdGFibGUgdHIgdGggewogIHRleHQtYWxpZ246IGNlbnRlcjsKICBib3JkZXI6IDFweCBzb2xpZCAjNzdhZjljOwogIGJhY2tncm91bmQ6IHJnYmEoMTE5LCAxNzUsIDE1NiwgMC4yMik7CiAgZm9udC13ZWlnaHQ6IDUwMDsKICBwYWRkaW5nOiA1cHg7Cn0KLm1hcmtkb3duLWJvZHkgdGFibGUgdHIgdGQgewogIHRleHQtYWxpZ246IGNlbnRlcjsKICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDExOSwgMTc1LCAxNTYsIDAuMjIpOwogIHBhZGRpbmc6IDVweDsKfQoubWFya2Rvd24tYm9keSBwcmUgewogIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2VyaWY7CiAgb3ZlcmZsb3c6IGF1dG87CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIGxpbmUtaGVpZ2h0OiAxLjc1Owp9Ci5tYXJrZG93bi1ib2R5IHByZSA+IGNvZGUgewogIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2VyaWY7CiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjNzdhZjljOwogIGRpc3BsYXk6IGJsb2NrOwogIHBhZGRpbmc6IDE2cHggMTJweDsKICBtYXJnaW46IDA7CiAgZm9udC1zaXplOiAwLjllbTsKICBjb2xvcjogIzZlNzc4MzsKICB3b3JkLWJyZWFrOiBub3JtYWw7CiAgb3ZlcmZsb3cteDogYXV0bzsKICBiYWNrZ3JvdW5kOiAjZjhmOGY4Owp9Ci5tYXJrZG93bi1ib2R5IGEgewogIGNvbG9yOiAjNzdhZjljOwogIGZvbnQtd2VpZ2h0OiA0MDA7CiAgYmFja2dyb3VuZDogI2ZmZjsKICBib3JkZXItYm90dG9tOiBub25lOwogIHBhZGRpbmc6IDJweCA1cHg7CiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogIHRyYW5zaXRpb246IGFsbCAwLjVzOwp9Ci5tYXJrZG93bi1ib2R5IGE6aG92ZXIgewogIGJhY2tncm91bmQ6IHJnYmEoMTE5LCAxNzUsIDE1NiwgMC4yMik7CiAgY29sb3I6ICM2ZTc3ODM7Cn0KLm1hcmtkb3duLWJvZHkgc3Ryb25nIHsKICBmb250LXdlaWdodDogNzAwOwogIGNvbG9yOiAjNmU3NzgzOwp9Cg==", Gb = "data:text/css;base64,", cb = "data:text/css;base64,", Cb = "data:text/css;base64,Lm1hcmtkb3duLWJvZHkgewogIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7CiAgbGluZS1oZWlnaHQ6IDEuNzU7CiAgZm9udC13ZWlnaHQ6IDQwMDsKICBmb250LXNpemU6IDE2cHg7CiAgb3ZlcmZsb3cteDogaGlkZGVuOwogIGNvbG9yOiAjMjUyOTMzOwp9CgoubWFya2Rvd24tYm9keSBoMSwKLm1hcmtkb3duLWJvZHkgaDIsCi5tYXJrZG93bi1ib2R5IGgzLAoubWFya2Rvd24tYm9keSBoNCwKLm1hcmtkb3duLWJvZHkgaDUsCi5tYXJrZG93bi1ib2R5IGg2IHsKICBsaW5lLWhlaWdodDogMS41OwogIG1hcmdpbi10b3A6IDM1cHg7CiAgbWFyZ2luLWJvdHRvbTogMTBweDsKICBwYWRkaW5nLWJvdHRvbTogNXB4Owp9CgoubWFya2Rvd24tYm9keSBoMSB7CiAgZm9udC1zaXplOiAyNHB4OwogIGxpbmUtaGVpZ2h0OiAzOHB4OwogIG1hcmdpbi1ib3R0b206IDVweDsKfQoKLm1hcmtkb3duLWJvZHkgaDIgewogIGZvbnQtc2l6ZTogMjJweDsKICBsaW5lLWhlaWdodDogMzRweDsKICBwYWRkaW5nLWJvdHRvbTogMTJweDsKICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2VjZWNlYzsKfQoKLm1hcmtkb3duLWJvZHkgaDMgewogIGZvbnQtc2l6ZTogMjBweDsKICBsaW5lLWhlaWdodDogMjhweDsKfQoKLm1hcmtkb3duLWJvZHkgaDQgewogIGZvbnQtc2l6ZTogMThweDsKICBsaW5lLWhlaWdodDogMjZweDsKfQoKLm1hcmtkb3duLWJvZHkgaDUgewogIGZvbnQtc2l6ZTogMTdweDsKICBsaW5lLWhlaWdodDogMjRweDsKfQoKLm1hcmtkb3duLWJvZHkgaDYgewogIGZvbnQtc2l6ZTogMTZweDsKICBsaW5lLWhlaWdodDogMjRweDsKfQoKLm1hcmtkb3duLWJvZHkgcCB7CiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7CiAgbWFyZ2luLXRvcDogMjJweDsKICBtYXJnaW4tYm90dG9tOiAyMnB4Owp9CgoubWFya2Rvd24tYm9keSBpbWcgewogIG1heC13aWR0aDogMTAwJTsKfQoKLm1hcmtkb3duLWJvZHkgaHIgewogIGJvcmRlcjogbm9uZTsKICBib3JkZXItdG9wOiAxcHggc29saWQgI2RkZDsKICBtYXJnaW4tdG9wOiAzMnB4OwogIG1hcmdpbi1ib3R0b206IDMycHg7Cn0KCi5tYXJrZG93bi1ib2R5IGNvZGUgewogIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7CiAgYm9yZGVyLXJhZGl1czogMnB4OwogIG92ZXJmbG93LXg6IGF1dG87CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjVmNTsKICBjb2xvcjogI2ZmNTAyYzsKICBmb250LXNpemU6IDAuODdlbTsKICBwYWRkaW5nOiAwLjA2NWVtIDAuNGVtOwp9CgoubWFya2Rvd24tYm9keSBjb2RlLAoubWFya2Rvd24tYm9keSBwcmUgewogIGZvbnQtZmFtaWx5OiBNZW5sbywgTW9uYWNvLCBDb25zb2xhcywgQ291cmllciBOZXcsIG1vbm9zcGFjZTsKfQoKLm1hcmtkb3duLWJvZHkgcHJlIHsKICBvdmVyZmxvdzogYXV0bzsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgbGluZS1oZWlnaHQ6IDEuNzU7Cn0KCi5tYXJrZG93bi1ib2R5IHByZSA+IGNvZGUgewogIGZvbnQtc2l6ZTogMTJweDsKICBwYWRkaW5nOiAxNXB4IDEycHg7CiAgbWFyZ2luOiAwOwogIHdvcmQtYnJlYWs6IG5vcm1hbDsKICBkaXNwbGF5OiBibG9jazsKICBvdmVyZmxvdy14OiBhdXRvOwogIGNvbG9yOiAjMzMzOwogIGJhY2tncm91bmQ6ICNmOGY4Zjg7Cn0KCi5tYXJrZG93bi1ib2R5IGEgewogIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICBjb2xvcjogIzAyNjljODsKICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2QxZTlmZjsKfQoKLm1hcmtkb3duLWJvZHkgYTphY3RpdmUsCi5tYXJrZG93bi1ib2R5IGE6aG92ZXIgewogIGNvbG9yOiAjMjc1YjhjOwp9CgoubWFya2Rvd24tYm9keSB0YWJsZSB7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrICFpbXBvcnRhbnQ7CiAgZm9udC1zaXplOiAxMnB4OwogIHdpZHRoOiBhdXRvOwogIG1heC13aWR0aDogMTAwJTsKICBvdmVyZmxvdzogYXV0bzsKICBib3JkZXI6IDFweCBzb2xpZCAjZjZmNmY2Owp9CgoubWFya2Rvd24tYm9keSB0aGVhZCB7CiAgYmFja2dyb3VuZDogI2Y2ZjZmNjsKICBjb2xvcjogIzAwMDsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9CgoubWFya2Rvd24tYm9keSB0cjpudGgtY2hpbGQoMm4pIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmY2ZjOwp9CgoubWFya2Rvd24tYm9keSB0ZCwKLm1hcmtkb3duLWJvZHkgdGggewogIHBhZGRpbmc6IDEycHggN3B4OwogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9CgoubWFya2Rvd24tYm9keSB0ZCB7CiAgbWluLXdpZHRoOiAxMjBweDsKfQoKLm1hcmtkb3duLWJvZHkgYmxvY2txdW90ZSB7CiAgY29sb3I6ICM2NjY7CiAgcGFkZGluZzogMXB4IDIzcHg7CiAgbWFyZ2luOiAyMnB4IDA7CiAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAjY2JjYmNiOwogIGJhY2tncm91bmQtY29sb3I6ICNmOGY4Zjg7Cn0KCi5tYXJrZG93bi1ib2R5IGJsb2NrcXVvdGU6YWZ0ZXIgewogIGRpc3BsYXk6IGJsb2NrOwogIGNvbnRlbnQ6ICIiOwp9CgoubWFya2Rvd24tYm9keSBibG9ja3F1b3RlID4gcCB7CiAgbWFyZ2luOiAxMHB4IDA7Cn0KCi5tYXJrZG93bi1ib2R5IG9sLAoubWFya2Rvd24tYm9keSB1bCB7CiAgcGFkZGluZy1sZWZ0OiAyOHB4Owp9CgoubWFya2Rvd24tYm9keSBvbCBsaSwKLm1hcmtkb3duLWJvZHkgdWwgbGkgewogIG1hcmdpbi1ib3R0b206IDA7CiAgbGlzdC1zdHlsZTogaW5oZXJpdDsKfQoKLm1hcmtkb3duLWJvZHkgb2wgbGkgLnRhc2stbGlzdC1pdGVtLAoubWFya2Rvd24tYm9keSB1bCBsaSAudGFzay1saXN0LWl0ZW0gewogIGxpc3Qtc3R5bGU6IG5vbmU7Cn0KCi5tYXJrZG93bi1ib2R5IG9sIGxpIC50YXNrLWxpc3QtaXRlbSBvbCwKLm1hcmtkb3duLWJvZHkgb2wgbGkgLnRhc2stbGlzdC1pdGVtIHVsLAoubWFya2Rvd24tYm9keSB1bCBsaSAudGFzay1saXN0LWl0ZW0gb2wsCi5tYXJrZG93bi1ib2R5IHVsIGxpIC50YXNrLWxpc3QtaXRlbSB1bCB7CiAgbWFyZ2luLXRvcDogMDsKfQoKLm1hcmtkb3duLWJvZHkgb2wgb2wsCi5tYXJrZG93bi1ib2R5IG9sIHVsLAoubWFya2Rvd24tYm9keSB1bCBvbCwKLm1hcmtkb3duLWJvZHkgdWwgdWwgewogIG1hcmdpbi10b3A6IDNweDsKfQoKLm1hcmtkb3duLWJvZHkgb2wgbGkgewogIHBhZGRpbmctbGVmdDogNnB4Owp9CgoubWFya2Rvd24tYm9keSAuY29udGFpbnMtdGFzay1saXN0IHsKICBwYWRkaW5nLWxlZnQ6IDA7Cn0KCi5tYXJrZG93bi1ib2R5IC50YXNrLWxpc3QtaXRlbSB7CiAgbGlzdC1zdHlsZTogbm9uZTsKfQoKQG1lZGlhIChtYXgtd2lkdGg6IDcyMHB4KSB7CiAgLm1hcmtkb3duLWJvZHkgaDEgewogICAgZm9udC1zaXplOiAyNHB4OwogIH0KCiAgLm1hcmtkb3duLWJvZHkgaDIgewogICAgZm9udC1zaXplOiAyMHB4OwogIH0KCiAgLm1hcmtkb3duLWJvZHkgaDMgewogICAgZm9udC1zaXplOiAxOHB4OwogIH0KfQo=", eb = "data:text/css;base64,Lm1hcmtkb3duLWJvZHkgewogIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7CiAgbGluZS1oZWlnaHQ6IDEuODsKICBmb250LXdlaWdodDogNDAwOwogIGZvbnQtc2l6ZTogMTZweDsKICB3b3JkLXNwYWNpbmc6IDJweDsKICBsZXR0ZXItc3BhY2luZzogMnB4OwogIG92ZXJmbG93LXg6IGhpZGRlbjsKICBjb2xvcjogIzNlM2UzZTsKICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoCiAgICAgIDkwZGVnLAogICAgICByZ2JhKDUwLCAwLCAwLCAwLjA1KSAzJSwKICAgICAgdHJhbnNwYXJlbnQgMAogICAgKSwKICAgIGxpbmVhci1ncmFkaWVudCgxdHVybiwgcmdiYSg1MCwgMCwgMCwgMC4wNSkgMyUsIHRyYW5zcGFyZW50IDApOwogIGJhY2tncm91bmQtc2l6ZTogMjBweCAyMHB4OwogIGJhY2tncm91bmQtcG9zaXRpb246IDUwJTsKfQoubWFya2Rvd24tYm9keSBoMSwKLm1hcmtkb3duLWJvZHkgaDIsCi5tYXJrZG93bi1ib2R5IGgzLAoubWFya2Rvd24tYm9keSBoNCwKLm1hcmtkb3duLWJvZHkgaDUsCi5tYXJrZG93bi1ib2R5IGg2IHsKICBsaW5lLWhlaWdodDogMS41OwogIG1hcmdpbi10b3A6IDM1cHg7CiAgbWFyZ2luLWJvdHRvbTogMTBweDsKICBwYWRkaW5nLWJvdHRvbTogNXB4Owp9Ci5tYXJrZG93bi1ib2R5IGgxIHsKICBmb250LXNpemU6IDMwcHg7CiAgbWFyZ2luLWJvdHRvbTogNXB4Owp9Ci5tYXJrZG93bi1ib2R5IGgyIHsKICBwYWRkaW5nLWJvdHRvbTogMTJweDsKICBmb250LXNpemU6IDI0cHg7CiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlY2VjZWM7Cn0KLm1hcmtkb3duLWJvZHkgaDMgewogIGZvbnQtc2l6ZTogMThweDsKICBwYWRkaW5nLWJvdHRvbTogMDsKfQoubWFya2Rvd24tYm9keSBoNCB7CiAgZm9udC1zaXplOiAxLjJlbTsKICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2VmNzA2MDsKICB3b3JkLXNwYWNpbmc6IDAgIWltcG9ydGFudDsKICBsZXR0ZXItc3BhY2luZzogMCAhaW1wb3J0YW50OwogIGZvbnQtc2l6ZTogaW5oZXJpdDsKICBsaW5lLWhlaWdodDogaW5oZXJpdDsKICBkaXNwbGF5OiBibG9jazsKICBmb250LXdlaWdodDogNDAwOwogIGJhY2tncm91bmQ6ICNlZjcwNjA7CiAgY29sb3I6ICNmZmY7CiAgcGFkZGluZzogMTBweDsKICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogM3B4OwogIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDNweDsKICBtYXJnaW4tcmlnaHQ6IDNweDsKfQoubWFya2Rvd24tYm9keSBoNSB7CiAgZm9udC1zaXplOiAxNXB4Owp9Ci5tYXJrZG93bi1ib2R5IGg2IHsKICBtYXJnaW4tdG9wOiA1cHg7Cn0KLm1hcmtkb3duLWJvZHkgcCB7CiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7CiAgbWFyZ2luLXRvcDogMjJweDsKICBtYXJnaW4tYm90dG9tOiAyMnB4Owp9Ci5tYXJrZG93bi1ib2R5IGltZyB7CiAgbWF4LXdpZHRoOiAxMDAlOwp9Ci5tYXJrZG93bi1ib2R5IGhyIHsKICBib3JkZXI6IG5vbmU7CiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNkZGQ7CiAgbWFyZ2luLXRvcDogMzJweDsKICBtYXJnaW4tYm90dG9tOiAzMnB4Owp9Ci5tYXJrZG93bi1ib2R5IGNvZGUgewogIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7CiAgYm9yZGVyLXJhZGl1czogMnB4OwogIG92ZXJmbG93LXg6IGF1dG87CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjVmNTsKICBjb2xvcjogI2ZmNTAyYzsKICBmb250LXNpemU6IDAuODdlbTsKICBwYWRkaW5nOiAwLjA2NWVtIDAuNGVtOwp9Ci5tYXJrZG93bi1ib2R5IGNvZGUsCi5tYXJrZG93bi1ib2R5IHByZSB7CiAgZm9udC1mYW1pbHk6IE1lbmxvLCBNb25hY28sIENvbnNvbGFzLCBDb3VyaWVyIE5ldywgbW9ub3NwYWNlOwp9Ci5tYXJrZG93bi1ib2R5IHByZSB7CiAgb3ZlcmZsb3c6IGF1dG87CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIGxpbmUtaGVpZ2h0OiAxLjc1Owp9Ci5tYXJrZG93bi1ib2R5IHByZSA+IGNvZGUgewogIGZvbnQtc2l6ZTogMTJweDsKICBwYWRkaW5nOiAxNXB4IDEycHg7CiAgbWFyZ2luOiAwOwogIHdvcmQtYnJlYWs6IG5vcm1hbDsKICBkaXNwbGF5OiBibG9jazsKICBvdmVyZmxvdy14OiBhdXRvOwogIGNvbG9yOiAjMzMzOwogIGJhY2tncm91bmQ6ICNmOGY4Zjg7Cn0KLm1hcmtkb3duLWJvZHkgYSB7CiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogIGNvbG9yOiAjMDI2OWM4OwogIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZDFlOWZmOwp9Ci5tYXJrZG93bi1ib2R5IGE6YWN0aXZlLAoubWFya2Rvd24tYm9keSBhOmhvdmVyIHsKICBjb2xvcjogIzI3NWI4YzsKfQoubWFya2Rvd24tYm9keSB0YWJsZSB7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrICFpbXBvcnRhbnQ7CiAgZm9udC1zaXplOiAxMnB4OwogIHdpZHRoOiBhdXRvOwogIG1heC13aWR0aDogMTAwJTsKICBvdmVyZmxvdzogYXV0bzsKICBib3JkZXI6IDFweCBzb2xpZCAjZjZmNmY2Owp9Ci5tYXJrZG93bi1ib2R5IHRoZWFkIHsKICBiYWNrZ3JvdW5kOiAjZjZmNmY2OwogIGNvbG9yOiAjMDAwOwogIHRleHQtYWxpZ246IGxlZnQ7Cn0KLm1hcmtkb3duLWJvZHkgdHI6bnRoLWNoaWxkKDJuKSB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZjZmNmYzsKfQoubWFya2Rvd24tYm9keSB0ZCwKLm1hcmtkb3duLWJvZHkgdGggewogIHBhZGRpbmc6IDEycHggN3B4OwogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9Ci5tYXJrZG93bi1ib2R5IHRkIHsKICBtaW4td2lkdGg6IDEyMHB4Owp9Ci5tYXJrZG93bi1ib2R5IGJsb2NrcXVvdGUgewogIGNvbG9yOiAjNjY2OwogIHBhZGRpbmc6IDFweCAyM3B4OwogIG1hcmdpbjogMjJweCAwOwogIGJvcmRlci1sZWZ0OiA0cHggc29saWQgI2NiY2JjYjsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOGY4Owp9Ci5tYXJrZG93bi1ib2R5IGJsb2NrcXVvdGU6YWZ0ZXIgewogIGRpc3BsYXk6IGJsb2NrOwogIGNvbnRlbnQ6ICIiOwp9Ci5tYXJrZG93bi1ib2R5IGJsb2NrcXVvdGUgPiBwIHsKICBtYXJnaW46IDEwcHggMDsKfQoubWFya2Rvd24tYm9keSBvbCwKLm1hcmtkb3duLWJvZHkgdWwgewogIHBhZGRpbmctbGVmdDogMjhweDsKfQoubWFya2Rvd24tYm9keSBvbCBsaSwKLm1hcmtkb3duLWJvZHkgdWwgbGkgewogIG1hcmdpbi1ib3R0b206IDA7CiAgbGlzdC1zdHlsZTogaW5oZXJpdDsKfQoubWFya2Rvd24tYm9keSBvbCBsaSAudGFzay1saXN0LWl0ZW0sCi5tYXJrZG93bi1ib2R5IHVsIGxpIC50YXNrLWxpc3QtaXRlbSB7CiAgbGlzdC1zdHlsZTogbm9uZTsKfQoubWFya2Rvd24tYm9keSBvbCBsaSAudGFzay1saXN0LWl0ZW0gb2wsCi5tYXJrZG93bi1ib2R5IG9sIGxpIC50YXNrLWxpc3QtaXRlbSB1bCwKLm1hcmtkb3duLWJvZHkgdWwgbGkgLnRhc2stbGlzdC1pdGVtIG9sLAoubWFya2Rvd24tYm9keSB1bCBsaSAudGFzay1saXN0LWl0ZW0gdWwgewogIG1hcmdpbi10b3A6IDA7Cn0KLm1hcmtkb3duLWJvZHkgb2wgb2wsCi5tYXJrZG93bi1ib2R5IG9sIHVsLAoubWFya2Rvd24tYm9keSB1bCBvbCwKLm1hcmtkb3duLWJvZHkgdWwgdWwgewogIG1hcmdpbi10b3A6IDNweDsKfQoubWFya2Rvd24tYm9keSBvbCBsaSB7CiAgcGFkZGluZy1sZWZ0OiA2cHg7Cn0KQG1lZGlhIChtYXgtd2lkdGg6IDcyMHB4KSB7CiAgLm1hcmtkb3duLWJvZHkgaDEgewogICAgZm9udC1zaXplOiAyNHB4OwogIH0KICAubWFya2Rvd24tYm9keSBoMiB7CiAgICBmb250LXNpemU6IDIwcHg7CiAgfQogIC5tYXJrZG93bi1ib2R5IGgzIHsKICAgIGZvbnQtc2l6ZTogMThweDsKICB9Cn0K", Bb = "data:text/css;base64,", ab = "data:text/css;base64,Lm1hcmtkb3duLWJvZHkgcHJlLAoubWFya2Rvd24tYm9keSBwcmUgPiBjb2RlLmhsanMgewogIGNvbG9yOiAjMzMzOwogIGJhY2tncm91bmQ6ICNmOGY4Zjg7Cn0KLmhsanMtY29tbWVudCwKLmhsanMtcXVvdGUgewogIGNvbG9yOiAjOTk4OwogIGZvbnQtc3R5bGU6IGl0YWxpYzsKfQouaGxqcy1rZXl3b3JkLAouaGxqcy1zZWxlY3Rvci10YWcsCi5obGpzLXN1YnN0IHsKICBjb2xvcjogIzMzMzsKICBmb250LXdlaWdodDogNzAwOwp9Ci5obGpzLWxpdGVyYWwsCi5obGpzLW51bWJlciwKLmhsanMtdGFnIC5obGpzLWF0dHIsCi5obGpzLXRlbXBsYXRlLXZhcmlhYmxlLAouaGxqcy12YXJpYWJsZSB7CiAgY29sb3I6IHRlYWw7Cn0KLmhsanMtZG9jdGFnLAouaGxqcy1zdHJpbmcgewogIGNvbG9yOiAjZDE0Owp9Ci5obGpzLXNlY3Rpb24sCi5obGpzLXNlbGVjdG9yLWlkLAouaGxqcy10aXRsZSB7CiAgY29sb3I6ICM5MDA7CiAgZm9udC13ZWlnaHQ6IDcwMDsKfQouaGxqcy1zdWJzdCB7CiAgZm9udC13ZWlnaHQ6IDQwMDsKfQouaGxqcy1jbGFzcyAuaGxqcy10aXRsZSwKLmhsanMtdHlwZSB7CiAgY29sb3I6ICM0NTg7CiAgZm9udC13ZWlnaHQ6IDcwMDsKfQouaGxqcy1hdHRyaWJ1dGUsCi5obGpzLW5hbWUsCi5obGpzLXRhZyB7CiAgY29sb3I6IG5hdnk7CiAgZm9udC13ZWlnaHQ6IDQwMDsKfQouaGxqcy1saW5rLAouaGxqcy1yZWdleHAgewogIGNvbG9yOiAjMDA5OTI2Owp9Ci5obGpzLWJ1bGxldCwKLmhsanMtc3ltYm9sIHsKICBjb2xvcjogIzk5MDA3MzsKfQouaGxqcy1idWlsdF9pbiwKLmhsanMtYnVpbHRpbi1uYW1lIHsKICBjb2xvcjogIzAwODZiMzsKfQouaGxqcy1tZXRhIHsKICBjb2xvcjogIzk5OTsKICBmb250LXdlaWdodDogNzAwOwp9Ci5obGpzLWRlbGV0aW9uIHsKICBiYWNrZ3JvdW5kOiAjZmRkOwp9Ci5obGpzLWFkZGl0aW9uIHsKICBiYWNrZ3JvdW5kOiAjZGZkOwp9Ci5obGpzLWVtcGhhc2lzIHsKICBmb250LXN0eWxlOiBpdGFsaWM7Cn0KLmhsanMtc3Ryb25nIHsKICBmb250LXdlaWdodDogNzAwOwp9Cg==", Rb = "data:text/css;base64,", sb = "data:text/css;base64,", ob = "data:text/css;base64,", Yb = "data:text/css;base64,QGNoYXJzZXQgIlVURi04IjsKLm1hcmtkb3duLWJvZHkgewogIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7CiAgbGluZS1oZWlnaHQ6IDEuNmVtOwogIGZvbnQtd2VpZ2h0OiA0MDA7CiAgZm9udC1zaXplOiAxNXB4OwogIG92ZXJmbG93LXg6IGhpZGRlbjsKICBjb2xvcjogIzMwMzEzMzsKICBmb250LWZhbWlseTogSGVsdmV0aWNhIE5ldWUsIEhlbHZldGljYSwgUGluZ0ZhbmcgU0MsIEhpcmFnaW5vIFNhbnMgR0IsCiAgICBNaWNyb3NvZnQgWWFIZWksIOW+rui9r+mbhem7kSwgQXJpYWwsIHNhbnMtc2VyaWY7Cn0KLm1hcmtkb3duLWJvZHkgaDEsCi5tYXJrZG93bi1ib2R5IGgyLAoubWFya2Rvd24tYm9keSBoMywKLm1hcmtkb3duLWJvZHkgaDQsCi5tYXJrZG93bi1ib2R5IGg1LAoubWFya2Rvd24tYm9keSBoNiB7CiAgbGluZS1oZWlnaHQ6IDEuNmVtOwogIG1hcmdpbjogMS4zZW0gMDsKfQoubWFya2Rvd24tYm9keSBoMSB7CiAgZm9udC1zaXplOiAzMHB4OwogIG1hcmdpbi10b3A6IDUwcHg7CiAgbWFyZ2luLWJvdHRvbTogMTBweDsKfQoubWFya2Rvd24tYm9keSBoMiB7CiAgbWFyZ2luLXRvcDogNDVweDsKICBtYXJnaW4tYm90dG9tOiAxMHB4OwogIGZvbnQtc2l6ZTogMjZweDsKfQoubWFya2Rvd24tYm9keSBoMyB7CiAgbWFyZ2luLXRvcDogNDBweDsKICBtYXJnaW4tYm90dG9tOiAxMHB4OwogIGZvbnQtc2l6ZTogMjJweDsKfQoubWFya2Rvd24tYm9keSBoNCB7CiAgZm9udC1zaXplOiAxOHB4Owp9Ci5tYXJrZG93bi1ib2R5IGg1IHsKICBmb250LXNpemU6IDE2cHg7Cn0KLm1hcmtkb3duLWJvZHkgaDYgewogIGZvbnQtc2l6ZTogMTVweDsKICBtYXJnaW4tdG9wOiA1cHg7Cn0KLm1hcmtkb3duLWJvZHkgcCB7CiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7CiAgbWFyZ2luLXRvcDogMS42ZW07CiAgbWFyZ2luLWJvdHRvbTogMS42ZW07Cn0KLm1hcmtkb3duLWJvZHkgaW1nIHsKICBtYXgtd2lkdGg6IDEwMCU7Cn0KLm1hcmtkb3duLWJvZHkgaHIgewogIGJvcmRlcjogbm9uZTsKICBib3JkZXItdG9wOiAxcHggc29saWQgI2RkZDsKICBtYXJnaW4tdG9wOiAzMnB4OwogIG1hcmdpbi1ib3R0b206IDMycHg7Cn0KLm1hcmtkb3duLWJvZHkgY29kZSB7CiAgZm9udC1mYW1pbHk6IE1lbmxvLCBNb25hY28sIENvbnNvbGFzLCBDb3VyaWVyIE5ldywgbW9ub3NwYWNlOwogIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7CiAgYm9yZGVyLXJhZGl1czogMnB4OwogIG92ZXJmbG93LXg6IGF1dG87CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjVmNTsKICBjb2xvcjogI2U5NjkwMDsKICBmb250LXNpemU6IDAuODdlbTsKICBtYXJnaW46IDAgMnB4OwogIHBhZGRpbmc6IDNweCA1cHg7CiAgd2hpdGUtc3BhY2U6IHByZS13cmFwOwp9Ci5tYXJrZG93bi1ib2R5CiAgLm1hcmtkb3duLXNlY3Rpb24KICA+IDpub3QoaDEpOm5vdChoMik6bm90KGgzKTpub3QoaDQpOm5vdChoNSk6bm90KGg2KQogIGNvZGUgewogIGZvbnQtc2l6ZTogMC44cmVtOwogIGZvbnQtZmFtaWx5OiBSb2JvdG8gTW9ubywgTW9uYWNvLCBjb3VyaWVyLCBtb25vc3BhY2U7Cn0KLm1hcmtkb3duLWJvZHkgcHJlIHsKICBmb250LWZhbWlseTogTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIENvdXJpZXIgTmV3LCBtb25vc3BhY2U7CiAgb3ZlcmZsb3c6IGF1dG87CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIGxpbmUtaGVpZ2h0OiAxLjc1OwogIGJvcmRlci1yYWRpdXM6IDRweDsKfQoubWFya2Rvd24tYm9keSBwcmUgPiBjb2RlIHsKICBmb250LXNpemU6IDEycHg7CiAgcGFkZGluZzogMTVweCAxMnB4OwogIG1hcmdpbjogMDsKICB3b3JkLWJyZWFrOiBub3JtYWw7CiAgZGlzcGxheTogYmxvY2s7CiAgb3ZlcmZsb3cteDogYXV0bzsKICBjb2xvcjogIzMzMzsKICBiYWNrZ3JvdW5kOiAjZjhmOGY4Owp9Ci5tYXJrZG93bi1ib2R5IGEgewogIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICBjb2xvcjogIzQyYjk4MzsKICBsaW5lLWhlaWdodDogMS4yZW07Cn0KLm1hcmtkb3duLWJvZHkgYTphY3RpdmUsCi5tYXJrZG93bi1ib2R5IGE6aG92ZXIgewogIGNvbG9yOiByZ2JhKDY2LCAxODUsIDEzMSwgMC44NSk7CiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoNjYsIDE4NSwgMTMxLCAwLjYpOwp9Ci5tYXJrZG93bi1ib2R5IHRhYmxlIHsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDsKICBmb250LXNpemU6IDEycHg7CiAgbWF4LXdpZHRoOiAxMDAlOwogIG92ZXJmbG93OiBhdXRvOwogIGJvcmRlcjogMXB4IHNvbGlkICNmNmY2ZjY7CiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKfQoubWFya2Rvd24tYm9keSB0aGVhZCB7CiAgYmFja2dyb3VuZDogI2Y2ZjZmNjsKICBjb2xvcjogIzAwMDsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9Ci5tYXJrZG93bi1ib2R5IHRyOm50aC1jaGlsZCgybikgewogIGJhY2tncm91bmQtY29sb3I6ICNmYWZhZmE7Cn0KLm1hcmtkb3duLWJvZHkgdGQsCi5tYXJrZG93bi1ib2R5IHRoIHsKICBwYWRkaW5nOiAxMnB4IDZweDsKICBsaW5lLWhlaWdodDogMjRweDsKfQoubWFya2Rvd24tYm9keSB0ZCB7CiAgbWluLXdpZHRoOiAxMjBweDsKfQoubWFya2Rvd24tYm9keSBibG9ja3F1b3RlIHsKICBjb2xvcjogcmdiYSg1MiwgNzMsIDk0LCAwLjk1KTsKICBwYWRkaW5nOiAxcHggMjNweDsKICBtYXJnaW46IDIycHggMDsKICBib3JkZXItbGVmdDogNHB4IHNvbGlkICM0MmI5ODM7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg2NiwgMTg1LCAxMzEsIDAuMSk7Cn0KLm1hcmtkb3duLWJvZHkgYmxvY2txdW90ZTphZnRlciB7CiAgZGlzcGxheTogYmxvY2s7CiAgY29udGVudDogIiI7Cn0KLm1hcmtkb3duLWJvZHkgYmxvY2txdW90ZSA+IHAgewogIG1hcmdpbjogMTBweCAwOwp9Ci5tYXJrZG93bi1ib2R5IG9sLAoubWFya2Rvd24tYm9keSB1bCB7CiAgcGFkZGluZy1sZWZ0OiAyOHB4Owp9Ci5tYXJrZG93bi1ib2R5IG9sIGxpLAoubWFya2Rvd24tYm9keSB1bCBsaSB7CiAgbWFyZ2luLWJvdHRvbTogMDsKICBsaXN0LXN0eWxlOiBpbmhlcml0Owp9Ci5tYXJrZG93bi1ib2R5IG9sIGxpIC50YXNrLWxpc3QtaXRlbSwKLm1hcmtkb3duLWJvZHkgdWwgbGkgLnRhc2stbGlzdC1pdGVtIHsKICBsaXN0LXN0eWxlOiBub25lOwp9Ci5tYXJrZG93bi1ib2R5IG9sIGxpIC50YXNrLWxpc3QtaXRlbSBvbCwKLm1hcmtkb3duLWJvZHkgb2wgbGkgLnRhc2stbGlzdC1pdGVtIHVsLAoubWFya2Rvd24tYm9keSB1bCBsaSAudGFzay1saXN0LWl0ZW0gb2wsCi5tYXJrZG93bi1ib2R5IHVsIGxpIC50YXNrLWxpc3QtaXRlbSB1bCB7CiAgbWFyZ2luLXRvcDogMDsKfQoubWFya2Rvd24tYm9keSBvbCBvbCwKLm1hcmtkb3duLWJvZHkgb2wgdWwsCi5tYXJrZG93bi1ib2R5IHVsIG9sLAoubWFya2Rvd24tYm9keSB1bCB1bCB7CiAgbWFyZ2luLXRvcDogM3B4Owp9Ci5tYXJrZG93bi1ib2R5IG9sIGxpIHsKICBwYWRkaW5nLWxlZnQ6IDZweDsKfQoubWFya2Rvd24tYm9keSAuY29udGFpbnMtdGFzay1saXN0IHsKICBwYWRkaW5nLWxlZnQ6IDA7Cn0KLm1hcmtkb3duLWJvZHkgLnRhc2stbGlzdC1pdGVtIHsKICBsaXN0LXN0eWxlOiBub25lOwp9CkBtZWRpYSAobWF4LXdpZHRoOiA3MjBweCkgewogIC5tYXJrZG93bi1ib2R5IGgxIHsKICAgIGZvbnQtc2l6ZTogMjRweDsKICB9CiAgLm1hcmtkb3duLWJvZHkgaDIgewogICAgZm9udC1zaXplOiAyMHB4OwogIH0KICAubWFya2Rvd24tYm9keSBoMyB7CiAgICBmb250LXNpemU6IDE4cHg7CiAgfQp9Cg==", Vb = "data:text/css;base64,Lm1hcmtkb3duLWJvZHkgewogIGNvbG9yOiAjNTk1OTU5OwogIGZvbnQtc2l6ZTogMTVweDsKICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgc3lzdGVtLXVpLCBCbGlua01hY1N5c3RlbUZvbnQsIEhlbHZldGljYSBOZXVlLAogICAgUGluZ0ZhbmcgU0MsIEhpcmFnaW5vIFNhbnMgR0IsIE1pY3Jvc29mdCBZYUhlaSwgQXJpYWwsIHNhbnMtc2VyaWY7CiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KAogICAgICA5MGRlZywKICAgICAgcmdiYSg2MCwgMTAsIDMwLCAwLjA0KSAzJSwKICAgICAgdHJhbnNwYXJlbnQgMAogICAgKSwKICAgIGxpbmVhci1ncmFkaWVudCgxdHVybiwgcmdiYSg2MCwgMTAsIDMwLCAwLjA0KSAzJSwgdHJhbnNwYXJlbnQgMCk7CiAgYmFja2dyb3VuZC1zaXplOiAyMHB4IDIwcHg7CiAgYmFja2dyb3VuZC1wb3NpdGlvbjogNTAlOwp9Ci5tYXJrZG93bi1ib2R5IHAgewogIGNvbG9yOiAjNTk1OTU5OwogIGZvbnQtc2l6ZTogMTVweDsKICBsaW5lLWhlaWdodDogMjsKICBmb250LXdlaWdodDogNDAwOwp9Ci5tYXJrZG93bi1ib2R5IHAgKyBwIHsKICBtYXJnaW4tdG9wOiAxNnB4Owp9Ci5tYXJrZG93bi1ib2R5IGgxLAoubWFya2Rvd24tYm9keSBoMiwKLm1hcmtkb3duLWJvZHkgaDMsCi5tYXJrZG93bi1ib2R5IGg0LAoubWFya2Rvd24tYm9keSBoNSwKLm1hcmtkb3duLWJvZHkgaDYgewogIHBhZGRpbmc6IDMwcHggMDsKICBtYXJnaW46IDA7CiAgY29sb3I6ICMxMzVjZTA7Cn0KLm1hcmtkb3duLWJvZHkgaDEgewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgZm9udC1zaXplOiAyMnB4OwogIG1hcmdpbjogNTBweCAwOwp9Ci5tYXJrZG93bi1ib2R5IGgxOmJlZm9yZSB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGNvbnRlbnQ6ICIiOwogIHRvcDogLTEwcHg7CiAgbGVmdDogNTAlOwogIHdpZHRoOiAzMnB4OwogIGhlaWdodDogMzJweDsKICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7CiAgYmFja2dyb3VuZC1zaXplOiAxMDAlIDEwMCU7CiAgb3BhY2l0eTogMC4zNjsKICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OwogIGJhY2tncm91bmQ6IHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUNBQUFBQWdDQU1BQUFCRXBJckdBQUFBQkdkQlRVRUFBTEdQQy94aEJRQUFBQ0JqU0ZKTkFBQjZKZ0FBZ0lRQUFQb0FBQUNBNkFBQWRUQUFBT3BnQUFBNm1BQUFGM0NjdWxFOEFBQUJmVkJNVkVYLy8vOEFkLzhBZ1A4QWdQOEFnUDhBZmY4QWdQOEFmLzhBZ1A4QVZmOEFmLzhBZi84QWdQOEFnUDhBZi84QWZ2OEFBUDhBZnY4QWZ2OEFlZjhBZ1A4QWRQOEFmdjhBZ1A4QWdQOEFjZjhBZS84QWdQOEFmLzhBZ1A4QWYvOEFmLzhBZlA4QWZ2OEFnUDhBZi84QWYvOEFmdjhBZnY4QWdQOEFmdjhBZ1A4QWYvOEFmLzhBZ1A4QWdQOEFmdjhBZ1A4QWYvOEFnUDhBZ1A4QWdQOEFlLzhBZnY4QWYvOEFnUDhBZi84QWdQOEFmLzhBZi84QWZmOEFmLzhBYmY4QWdQOEFmLzhBZ1A4QWYvOEFmLzhBZnY4QWdQOEFnUDhBZnY4QWZ2OEFnUDhBZi84QWZmOEFnUDhBZnY4QWdQOEFmZjhBZ1A4QWZQOEFnUDhBZS84QWdQOEFmLzhBZ1A4QWdQOEFnUDhBZnY4QWdQOEFnUDhBZ1A4QWZ2OEFnUDhBZ1A4QWdQOEFnUDhBZ1A4QWYvOEFnUDhBZi84QWYvOEFldjhBZi84QWdQOEFmZjhBZnY4QWdQOEFnUDhBZ1A4QWYvOEFnUDhBZi84QWYvOEFnUDhBZnY4QWdQOEFnUDhBZ1A4QWdQOEFmLzhBZVA4QWYvOEFmLzhBZi8vLy8vL3J6RUhuQUFBQWZYUlNUbE1BRDdDQ0FpdmF0eElEeDVFTXJQMTlBWGRMRXdnTFIrNmlDUi9NMHlMUnp5RkY3SnVwU1huOGN3NnY2MFEwUWVxekt0Z2VHMjM3SE1uZTg1MC82UWVxN1FhWitXZHlkSHRqK09NM3FFTkNNUllsMUIzSzJVN3dubFdFL21obGlyamtPRGE5Rk4vQkY3L2lOVi8ya0FTTlpwWDFXbGYwM0M0c3RSR3hnVVBjbHFvQUFBQUJZa3RIUkFDSUJSMUlBQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUIzUkpUVVVINGdFYUJ6Z1o0eWVNM0FBQUFUOUpSRUZVT012TlVsZGJ3a0FRdkNBcXNTQm9BQkU3YXNTT0JSVVZWQlFOTnV5OTk5Njc4OSs5Y01GQU1IblZlYm1kbSsvYm1kdGJRdjRkT0ZPVzJValB6Z0Z5TGZvNm53ZUtmSU1PQllXd0Z0bU1QR3oyWWoycEpJMEpEcTN1ZEpXNlZWYm1LYTlJMTkyVlFGVjFrdFhVQWw1TkIwY2Q0S3BuT1Jxc0VPMlpJUnBGOWdKZkU5RGNrcXEwS3VadDdVQUg1KzhFUEYzc3Bqc1JwQ2VRTk8vdEEvcUR3SURBK09DUWJCb0tBOE5PZGpNeVNnY1pHVk02andjZ1J1VWlTczBubFBGTlNyRXBKZlUwalRMRDZsbHFidkt4ZWk3T3p2a0ZOUW9oaTB2QXNqODErTW9xc0Nhb1BPUUZndXMvMUx5eGljaFcraFMySldDSFo3VmxGOWpiMTg3cElBWWNIaVZpSEFNbnA1bVRqSjhCNXhlRVhGNEIxemUvZlRoL0MwaDM5OERESTlIQjA3TzhjaSt2UkJkdmRHbmZQNGdCdU04dnc3WC9HM3dEbUZoRlpFZHh6ak1BQUFBbGRFVllkR1JoZEdVNlkzSmxZWFJsQURJd01UZ3RNREV0TWpaVU1EYzZOVFk2TWpVck1ERTZNREE2N3BWV0FBQUFKWFJGV0hSa1lYUmxPbTF2WkdsbWVRQXlNREU0TFRBeExUSTJWREEzT2pVMk9qSTFLekF4T2pBd1M3TXQ2Z0FBQUJsMFJWaDBVMjltZEhkaGNtVUFkM2QzTG1sdWEzTmpZWEJsTG05eVo1dnVQQm9BQUFBV2RFVllkRlJwZEd4bEFHcDFaV3BwYmw5c2IyZHZJR052Y0hseGFwbUtBQUFBVjNwVVdIUlNZWGNnY0hKdlptbHNaU0IwZVhCbElHbHdkR01BQUhpYzQvSU1DSEZXS0NqS1Q4dk1TZVZTQUFNakN5NWpDeE1qRTB1VEZBTVRJRVNBTk1Oa0F5T3pWQ0RMMk5USXhNekVITVFIeTRCSW9Fb3VBT29YRVhUeVFqV1ZBQUFBQUVsRlRrU3VRbUNDKTsKfQoubWFya2Rvd24tYm9keSBoMiB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIGZvbnQtc2l6ZTogMjBweDsKICBib3JkZXItbGVmdDogNHB4IHNvbGlkOwogIHBhZGRpbmc6IDAgMCAwIDEwcHg7CiAgbWFyZ2luOiAzMHB4IDA7Cn0KLm1hcmtkb3duLWJvZHkgaDMgewogIGZvbnQtc2l6ZTogMTZweDsKfQoubWFya2Rvd24tYm9keSB1bCB7CiAgbGlzdC1zdHlsZTogZGlzYyBvdXRzaWRlOwogIG1hcmdpbi1sZWZ0OiAyZW07CiAgbWFyZ2luLXRvcDogMWVtOwp9Ci5tYXJrZG93bi1ib2R5IGxpIHsKICBsaW5lLWhlaWdodDogMjsKICBjb2xvcjogIzU5NTk1OTsKfQoubWFya2Rvd24tYm9keSBpbWcubG9hZGVkIHsKICBtYXJnaW46IDAgYXV0bzsKICBkaXNwbGF5OiBibG9jazsKfQoubWFya2Rvd24tYm9keSBibG9ja3F1b3RlIHsKICBiYWNrZ3JvdW5kOiAjZmZmOWY5OwogIG1hcmdpbjogMmVtIDA7CiAgcGFkZGluZzogMnB4IDIwcHg7CiAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAjYjJhZWM1Owp9Ci5tYXJrZG93bi1ib2R5IGJsb2NrcXVvdGUgcCB7CiAgY29sb3I6ICM2NjY7CiAgbGluZS1oZWlnaHQ6IDI7Cn0KLm1hcmtkb3duLWJvZHkgYSB7CiAgY29sb3I6ICMwMzZhY2E7CiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMywgMTA2LCAyMDIsIDAuOCk7CiAgZm9udC13ZWlnaHQ6IDQwMDsKICB0ZXh0LWRlY29yYXRpb246IG5vbmU7Cn0KLm1hcmtkb3duLWJvZHkgZW0gc3Ryb25nLAoubWFya2Rvd24tYm9keSBzdHJvbmcgewogIGNvbG9yOiAjMDM2YWNhOwp9Ci5tYXJrZG93bi1ib2R5IGhyIHsKICBib3JkZXItdG9wOiAxcHggc29saWQgIzEzNWNlMDsKfQoubWFya2Rvd24tYm9keSBwcmUgewogIG92ZXJmbG93OiBhdXRvOwp9Ci5tYXJrZG93bi1ib2R5IGNvZGUsCi5tYXJrZG93bi1ib2R5IHByZSB7CiAgb3ZlcmZsb3c6IGF1dG87CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIGxpbmUtaGVpZ2h0OiAxLjc1OwogIGZvbnQtZmFtaWx5OiBNZW5sbywgTW9uYWNvLCBDb25zb2xhcywgQ291cmllciBOZXcsIG1vbm9zcGFjZTsKfQoubWFya2Rvd24tYm9keSBwcmUgPiBjb2RlIHsKICBmb250LXNpemU6IDEycHg7CiAgcGFkZGluZzogMTVweCAxMnB4OwogIG1hcmdpbjogMDsKICB3b3JkLWJyZWFrOiBub3JtYWw7CiAgZGlzcGxheTogYmxvY2s7CiAgb3ZlcmZsb3cteDogYXV0bzsKICBjb2xvcjogIzMzMzsKICBiYWNrZ3JvdW5kOiAjZjhmOGY4Owp9Ci5tYXJrZG93bi1ib2R5IGNvZGUgewogIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7CiAgYm9yZGVyLXJhZGl1czogMnB4OwogIG92ZXJmbG93LXg6IGF1dG87CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjVmNTsKICBjb2xvcjogI2ZmNTAyYzsKICBmb250LXNpemU6IDAuODdlbTsKICBwYWRkaW5nOiAwLjA2NWVtIDAuNGVtOwp9Ci5tYXJrZG93bi1ib2R5IHRhYmxlIHsKICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOwogIG1hcmdpbjogMXJlbSAwOwogIG92ZXJmbG93LXg6IGF1dG87Cn0KLm1hcmtkb3duLWJvZHkgdGFibGUgdGQsCi5tYXJrZG93bi1ib2R5IHRhYmxlIHRoIHsKICBib3JkZXI6IDFweCBzb2xpZCAjZGZlMmU1OwogIHBhZGRpbmc6IDAuNmVtIDFlbTsKfQoubWFya2Rvd24tYm9keSB0YWJsZSB0ciB7CiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNkZmUyZTU7Cn0KLm1hcmtkb3duLWJvZHkgdGFibGUgdHI6bnRoLWNoaWxkKDJuKSB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2Y2ZjhmYTsKfQo=", Nb = "data:text/css;base64,QGNoYXJzZXQgIlVURi04IjsKLm1hcmtkb3duLWJvZHkgewogIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7CiAgbGluZS1oZWlnaHQ6IDEuNzU7CiAgZm9udC13ZWlnaHQ6IDQwMDsKICBmb250LXNpemU6IDE1cHg7CiAgb3ZlcmZsb3cteDogaGlkZGVuOwogIGNvbG9yOiAjMzMzOwp9Ci5tYXJrZG93bi1ib2R5IGgxLAoubWFya2Rvd24tYm9keSBoMiwKLm1hcmtkb3duLWJvZHkgaDMsCi5tYXJrZG93bi1ib2R5IGg0LAoubWFya2Rvd24tYm9keSBoNSwKLm1hcmtkb3duLWJvZHkgaDYgewogIGxpbmUtaGVpZ2h0OiAxLjU7CiAgbWFyZ2luLXRvcDogMzVweDsKICBtYXJnaW4tYm90dG9tOiAxMHB4OwogIHBhZGRpbmctYm90dG9tOiA1cHg7Cn0KLm1hcmtkb3duLWJvZHkgaDE6Zmlyc3QtY2hpbGQsCi5tYXJrZG93bi1ib2R5IGgyOmZpcnN0LWNoaWxkLAoubWFya2Rvd24tYm9keSBoMzpmaXJzdC1jaGlsZCwKLm1hcmtkb3duLWJvZHkgaDQ6Zmlyc3QtY2hpbGQsCi5tYXJrZG93bi1ib2R5IGg1OmZpcnN0LWNoaWxkLAoubWFya2Rvd24tYm9keSBoNjpmaXJzdC1jaGlsZCB7CiAgbWFyZ2luLXRvcDogLTEuNXJlbTsKICBtYXJnaW4tYm90dG9tOiAxcmVtOwp9Ci5tYXJrZG93bi1ib2R5IGgxOmJlZm9yZSwKLm1hcmtkb3duLWJvZHkgaDI6YmVmb3JlLAoubWFya2Rvd24tYm9keSBoMzpiZWZvcmUsCi5tYXJrZG93bi1ib2R5IGg0OmJlZm9yZSwKLm1hcmtkb3duLWJvZHkgaDU6YmVmb3JlLAoubWFya2Rvd24tYm9keSBoNjpiZWZvcmUgewogIGNvbnRlbnQ6ICIjIjsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgY29sb3I6ICMzZWFmN2M7CiAgcGFkZGluZy1yaWdodDogMC4yM2VtOwp9Ci5tYXJrZG93bi1ib2R5IGgxIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgZm9udC1zaXplOiAyLjVyZW07CiAgbWFyZ2luLWJvdHRvbTogNXB4Owp9Ci5tYXJrZG93bi1ib2R5IGgxOmJlZm9yZSB7CiAgZm9udC1zaXplOiAyLjVyZW07Cn0KLm1hcmtkb3duLWJvZHkgaDIgewogIHBhZGRpbmctYm90dG9tOiAwLjVyZW07CiAgZm9udC1zaXplOiAyLjJyZW07CiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlY2VjZWM7Cn0KLm1hcmtkb3duLWJvZHkgaDMgewogIGZvbnQtc2l6ZTogMS41cmVtOwogIHBhZGRpbmctYm90dG9tOiAwOwp9Ci5tYXJrZG93bi1ib2R5IGg0IHsKICBmb250LXNpemU6IDEuMjVyZW07Cn0KLm1hcmtkb3duLWJvZHkgaDUgewogIGZvbnQtc2l6ZTogMXJlbTsKfQoubWFya2Rvd24tYm9keSBoNiB7CiAgbWFyZ2luLXRvcDogNXB4Owp9Ci5tYXJrZG93bi1ib2R5IHAgewogIGxpbmUtaGVpZ2h0OiBpbmhlcml0OwogIG1hcmdpbi10b3A6IDIycHg7CiAgbWFyZ2luLWJvdHRvbTogMjJweDsKfQoubWFya2Rvd24tYm9keSBzdHJvbmcgewogIGNvbG9yOiAjM2VhZjdjOwp9Ci5tYXJrZG93bi1ib2R5IGltZyB7CiAgbWF4LXdpZHRoOiAxMDAlOwogIGJvcmRlci1yYWRpdXM6IDJweDsKICBkaXNwbGF5OiBibG9jazsKICBtYXJnaW46IGF1dG87CiAgYm9yZGVyOiAzcHggc29saWQgcmdiYSg2MiwgMTc1LCAxMjQsIDAuMik7Cn0KLm1hcmtkb3duLWJvZHkgaHIgewogIGJvcmRlcjogbm9uZTsKICBib3JkZXItdG9wOiAxcHggc29saWQgIzNlYWY3YzsKICBtYXJnaW4tdG9wOiAzMnB4OwogIG1hcmdpbi1ib3R0b206IDMycHg7Cn0KLm1hcmtkb3duLWJvZHkgY29kZSB7CiAgd29yZC1icmVhazogYnJlYWstd29yZDsKICBvdmVyZmxvdy14OiBhdXRvOwogIHBhZGRpbmc6IDAuMnJlbSAwLjVyZW07CiAgbWFyZ2luOiAwOwogIGNvbG9yOiAjM2VhZjdjOwogIGZvbnQtd2VpZ2h0OiA3MDA7CiAgZm9udC1zaXplOiAwLjg1ZW07CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNywgMzEsIDM1LCAwLjA1KTsKICBib3JkZXItcmFkaXVzOiAzcHg7Cn0KLm1hcmtkb3duLWJvZHkgY29kZSwKLm1hcmtkb3duLWJvZHkgcHJlIHsKICBmb250LWZhbWlseTogTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIENvdXJpZXIgTmV3LCBtb25vc3BhY2U7Cn0KLm1hcmtkb3duLWJvZHkgcHJlIHsKICBvdmVyZmxvdzogYXV0bzsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgbGluZS1oZWlnaHQ6IDEuNzU7CiAgYm9yZGVyLXJhZGl1czogNnB4OwogIGJvcmRlcjogMnB4IHNvbGlkICMzZWFmN2M7Cn0KLm1hcmtkb3duLWJvZHkgcHJlID4gY29kZSB7CiAgZm9udC1zaXplOiAxMnB4OwogIHBhZGRpbmc6IDE1cHggMTJweDsKICBtYXJnaW46IDA7CiAgd29yZC1icmVhazogbm9ybWFsOwogIGRpc3BsYXk6IGJsb2NrOwogIG92ZXJmbG93LXg6IGF1dG87CiAgY29sb3I6ICMzMzM7CiAgYmFja2dyb3VuZDogI2Y4ZjhmODsKfQoubWFya2Rvd24tYm9keSBhIHsKICBmb250LXdlaWdodDogNTAwOwogIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICBjb2xvcjogIzNlYWY3YzsKfQoubWFya2Rvd24tYm9keSBhOmFjdGl2ZSwKLm1hcmtkb3duLWJvZHkgYTpob3ZlciB7CiAgYm9yZGVyLWJvdHRvbTogMS41cHggc29saWQgIzNlYWY3YzsKfQoubWFya2Rvd24tYm9keSBhOmJlZm9yZSB7CiAgY29udGVudDogIuKHsiI7Cn0KLm1hcmtkb3duLWJvZHkgdGFibGUgewogIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50OwogIGZvbnQtc2l6ZTogMTJweDsKICB3aWR0aDogYXV0bzsKICBtYXgtd2lkdGg6IDEwMCU7CiAgb3ZlcmZsb3c6IGF1dG87CiAgYm9yZGVyOiAxcHggc29saWQgIzNlYWY3YzsKfQoubWFya2Rvd24tYm9keSB0aGVhZCB7CiAgYmFja2dyb3VuZDogIzNlYWY3YzsKICBjb2xvcjogI2ZmZjsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9Ci5tYXJrZG93bi1ib2R5IHRyOm50aC1jaGlsZCgybikgewogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNjIsIDE3NSwgMTI0LCAwLjIpOwp9Ci5tYXJrZG93bi1ib2R5IHRkLAoubWFya2Rvd24tYm9keSB0aCB7CiAgcGFkZGluZzogMTJweCA3cHg7CiAgbGluZS1oZWlnaHQ6IDI0cHg7Cn0KLm1hcmtkb3duLWJvZHkgdGQgewogIG1pbi13aWR0aDogMTIwcHg7Cn0KLm1hcmtkb3duLWJvZHkgYmxvY2txdW90ZSB7CiAgY29sb3I6ICM2NjY7CiAgcGFkZGluZzogMXB4IDIzcHg7CiAgbWFyZ2luOiAyMnB4IDA7CiAgYm9yZGVyLWxlZnQ6IDAuNXJlbSBzb2xpZDsKICBib3JkZXItY29sb3I6ICM0MmI5ODM7CiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmODsKfQoubWFya2Rvd24tYm9keSBibG9ja3F1b3RlOmFmdGVyIHsKICBkaXNwbGF5OiBibG9jazsKICBjb250ZW50OiAiIjsKfQoubWFya2Rvd24tYm9keSBibG9ja3F1b3RlID4gcCB7CiAgbWFyZ2luOiAxMHB4IDA7Cn0KLm1hcmtkb3duLWJvZHkgZGV0YWlscyB7CiAgb3V0bGluZTogbm9uZTsKICBib3JkZXI6IG5vbmU7CiAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAjM2VhZjdjOwogIHBhZGRpbmctbGVmdDogMTBweDsKICBtYXJnaW4tbGVmdDogNHB4Owp9Ci5tYXJrZG93bi1ib2R5IGRldGFpbHMgc3VtbWFyeSB7CiAgY3Vyc29yOiBwb2ludGVyOwogIGJvcmRlcjogbm9uZTsKICBvdXRsaW5lOiBub25lOwogIGJhY2tncm91bmQ6ICNmZmY7CiAgbWFyZ2luOiAwIC0xN3B4Owp9Ci5tYXJrZG93bi1ib2R5IGRldGFpbHMgc3VtbWFyeTo6LXdlYmtpdC1kZXRhaWxzLW1hcmtlciB7CiAgY29sb3I6ICMzZWFmN2M7Cn0KLm1hcmtkb3duLWJvZHkgb2wsCi5tYXJrZG93bi1ib2R5IHVsIHsKICBwYWRkaW5nLWxlZnQ6IDI4cHg7Cn0KLm1hcmtkb3duLWJvZHkgb2wgbGksCi5tYXJrZG93bi1ib2R5IHVsIGxpIHsKICBtYXJnaW4tYm90dG9tOiAwOwogIGxpc3Qtc3R5bGU6IGluaGVyaXQ7Cn0KLm1hcmtkb3duLWJvZHkgb2wgbGkgLnRhc2stbGlzdC1pdGVtLAoubWFya2Rvd24tYm9keSB1bCBsaSAudGFzay1saXN0LWl0ZW0gewogIGxpc3Qtc3R5bGU6IG5vbmU7Cn0KLm1hcmtkb3duLWJvZHkgb2wgbGkgLnRhc2stbGlzdC1pdGVtIG9sLAoubWFya2Rvd24tYm9keSBvbCBsaSAudGFzay1saXN0LWl0ZW0gdWwsCi5tYXJrZG93bi1ib2R5IHVsIGxpIC50YXNrLWxpc3QtaXRlbSBvbCwKLm1hcmtkb3duLWJvZHkgdWwgbGkgLnRhc2stbGlzdC1pdGVtIHVsIHsKICBtYXJnaW4tdG9wOiAwOwp9Ci5tYXJrZG93bi1ib2R5IG9sIG9sLAoubWFya2Rvd24tYm9keSBvbCB1bCwKLm1hcmtkb3duLWJvZHkgdWwgb2wsCi5tYXJrZG93bi1ib2R5IHVsIHVsIHsKICBtYXJnaW4tdG9wOiAzcHg7Cn0KLm1hcmtkb3duLWJvZHkgb2wgbGkgewogIHBhZGRpbmctbGVmdDogNnB4Owp9Ci5tYXJrZG93bi1ib2R5IG9sIGxpOjptYXJrZXIgewogIGNvbG9yOiAjM2VhZjdjOwp9Ci5tYXJrZG93bi1ib2R5IHVsIGxpIHsKICBsaXN0LXN0eWxlOiBub25lOwp9Ci5tYXJrZG93bi1ib2R5IHVsIGxpOmJlZm9yZSB7CiAgY29udGVudDogIuKAoiI7CiAgbWFyZ2luLXJpZ2h0OiA0cHg7CiAgY29sb3I6ICMzZWFmN2M7Cn0KQG1lZGlhIChtYXgtd2lkdGg6IDcyMHB4KSB7CiAgLm1hcmtkb3duLWJvZHkgaDEgewogICAgZm9udC1zaXplOiAyNHB4OwogIH0KICAubWFya2Rvd24tYm9keSBoMiB7CiAgICBmb250LXNpemU6IDIwcHg7CiAgfQogIC5tYXJrZG93bi1ib2R5IGgzIHsKICAgIGZvbnQtc2l6ZTogMThweDsKICB9Cn0K", nb = "data:text/css;base64,", Fb = "data:text/css;base64,Lm1hcmtkb3duLWJvZHkgcHJlLAoubWFya2Rvd24tYm9keSBwcmUgPiBjb2RlLmhsanMgewogIGNvbG9yOiAjMzMzOwogIGJhY2tncm91bmQ6ICNmOGY4Zjg7Cn0KLmhsanMtY29tbWVudCwKLmhsanMtcXVvdGUgewogIGNvbG9yOiAjOTk4OwogIGZvbnQtc3R5bGU6IGl0YWxpYzsKfQouaGxqcy1rZXl3b3JkLAouaGxqcy1zZWxlY3Rvci10YWcsCi5obGpzLXN1YnN0IHsKICBjb2xvcjogIzMzMzsKICBmb250LXdlaWdodDogNzAwOwp9Ci5obGpzLWxpdGVyYWwsCi5obGpzLW51bWJlciwKLmhsanMtdGFnIC5obGpzLWF0dHIsCi5obGpzLXRlbXBsYXRlLXZhcmlhYmxlLAouaGxqcy12YXJpYWJsZSB7CiAgY29sb3I6IHRlYWw7Cn0KLmhsanMtZG9jdGFnLAouaGxqcy1zdHJpbmcgewogIGNvbG9yOiAjZDE0Owp9Ci5obGpzLXNlY3Rpb24sCi5obGpzLXNlbGVjdG9yLWlkLAouaGxqcy10aXRsZSB7CiAgY29sb3I6ICM5MDA7CiAgZm9udC13ZWlnaHQ6IDcwMDsKfQouaGxqcy1zdWJzdCB7CiAgZm9udC13ZWlnaHQ6IDQwMDsKfQouaGxqcy1jbGFzcyAuaGxqcy10aXRsZSwKLmhsanMtdHlwZSB7CiAgY29sb3I6ICM0NTg7CiAgZm9udC13ZWlnaHQ6IDcwMDsKfQouaGxqcy1hdHRyaWJ1dGUsCi5obGpzLW5hbWUsCi5obGpzLXRhZyB7CiAgY29sb3I6IG5hdnk7CiAgZm9udC13ZWlnaHQ6IDQwMDsKfQouaGxqcy1saW5rLAouaGxqcy1yZWdleHAgewogIGNvbG9yOiAjMDA5OTI2Owp9Ci5obGpzLWJ1bGxldCwKLmhsanMtc3ltYm9sIHsKICBjb2xvcjogIzk5MDA3MzsKfQouaGxqcy1idWlsdF9pbiwKLmhsanMtYnVpbHRpbi1uYW1lIHsKICBjb2xvcjogIzAwODZiMzsKfQouaGxqcy1tZXRhIHsKICBjb2xvcjogIzk5OTsKICBmb250LXdlaWdodDogNzAwOwp9Ci5obGpzLWRlbGV0aW9uIHsKICBiYWNrZ3JvdW5kOiAjZmRkOwp9Ci5obGpzLWFkZGl0aW9uIHsKICBiYWNrZ3JvdW5kOiAjZGZkOwp9Ci5obGpzLWVtcGhhc2lzIHsKICBmb250LXN0eWxlOiBpdGFsaWM7Cn0KLmhsanMtc3Ryb25nIHsKICBmb250LXdlaWdodDogNzAwOwp9Cg==";
function K() {
  return {
    async: !1,
    baseUrl: null,
    breaks: !1,
    extensions: null,
    gfm: !0,
    headerIds: !0,
    headerPrefix: "",
    highlight: null,
    langPrefix: "language-",
    mangle: !0,
    pedantic: !1,
    renderer: null,
    sanitize: !1,
    sanitizer: null,
    silent: !1,
    smartypants: !1,
    tokenizer: null,
    walkTokens: null,
    xhtml: !1
  };
}
let A = K();
function kb(d) {
  A = d;
}
const r = /[&<>"']/, hb = new RegExp(r.source, "g"), x = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/, wb = new RegExp(x.source, "g"), Ub = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
}, L = (d) => Ub[d];
function V(d, b) {
  if (b) {
    if (r.test(d))
      return d.replace(hb, L);
  } else if (x.test(d))
    return d.replace(wb, L);
  return d;
}
const Jb = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
function E(d) {
  return d.replace(Jb, (b, i) => (i = i.toLowerCase(), i === "colon" ? ":" : i.charAt(0) === "#" ? i.charAt(1) === "x" ? String.fromCharCode(parseInt(i.substring(2), 16)) : String.fromCharCode(+i.substring(1)) : ""));
}
const pb = /(^|[^\[])\^/g;
function R(d, b) {
  d = typeof d == "string" ? d : d.source, b = b || "";
  const i = {
    replace: (Z, g) => (g = g.source || g, g = g.replace(pb, "$1"), d = d.replace(Z, g), i),
    getRegex: () => new RegExp(d, b)
  };
  return i;
}
const Qb = /[^\w:]/g, Ab = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
function D(d, b, i) {
  if (d) {
    let Z;
    try {
      Z = decodeURIComponent(E(i)).replace(Qb, "").toLowerCase();
    } catch {
      return null;
    }
    if (Z.indexOf("javascript:") === 0 || Z.indexOf("vbscript:") === 0 || Z.indexOf("data:") === 0)
      return null;
  }
  b && !Ab.test(i) && (i = Mb(b, i));
  try {
    i = encodeURI(i).replace(/%25/g, "%");
  } catch {
    return null;
  }
  return i;
}
const v = {}, Ob = /^[^:]+:\/*[^/]*$/, Xb = /^([^:]+:)[\s\S]*$/, vb = /^([^:]+:\/*[^/]*)[\s\S]*$/;
function Mb(d, b) {
  v[" " + d] || (Ob.test(d) ? v[" " + d] = d + "/" : v[" " + d] = M(d, "/", !0)), d = v[" " + d];
  const i = d.indexOf(":") === -1;
  return b.substring(0, 2) === "//" ? i ? b : d.replace(Xb, "$1") + b : b.charAt(0) === "/" ? i ? b : d.replace(vb, "$1") + b : d + b;
}
const H = { exec: function() {
} };
function n(d) {
  let b = 1, i, Z;
  for (; b < arguments.length; b++) {
    i = arguments[b];
    for (Z in i)
      Object.prototype.hasOwnProperty.call(i, Z) && (d[Z] = i[Z]);
  }
  return d;
}
function y(d, b) {
  const i = d.replace(/\|/g, (W, I, l) => {
    let t = !1, B = I;
    for (; --B >= 0 && l[B] === "\\"; )
      t = !t;
    return t ? "|" : " |";
  }), Z = i.split(/ \|/);
  let g = 0;
  if (Z[0].trim() || Z.shift(), Z.length > 0 && !Z[Z.length - 1].trim() && Z.pop(), Z.length > b)
    Z.splice(b);
  else
    for (; Z.length < b; )
      Z.push("");
  for (; g < Z.length; g++)
    Z[g] = Z[g].trim().replace(/\\\|/g, "|");
  return Z;
}
function M(d, b, i) {
  const Z = d.length;
  if (Z === 0)
    return "";
  let g = 0;
  for (; g < Z; ) {
    const W = d.charAt(Z - g - 1);
    if (W === b && !i)
      g++;
    else if (W !== b && i)
      g++;
    else
      break;
  }
  return d.slice(0, Z - g);
}
function Hb(d, b) {
  if (d.indexOf(b[1]) === -1)
    return -1;
  const i = d.length;
  let Z = 0, g = 0;
  for (; g < i; g++)
    if (d[g] === "\\")
      g++;
    else if (d[g] === b[0])
      Z++;
    else if (d[g] === b[1] && (Z--, Z < 0))
      return g;
  return -1;
}
function f(d) {
  d && d.sanitize && !d.silent && console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options");
}
function S(d, b) {
  if (b < 1)
    return "";
  let i = "";
  for (; b > 1; )
    b & 1 && (i += d), b >>= 1, d += d;
  return i + d;
}
function z(d, b, i, Z) {
  const g = b.href, W = b.title ? V(b.title) : null, I = d[1].replace(/\\([\[\]])/g, "$1");
  if (d[0].charAt(0) !== "!") {
    Z.state.inLink = !0;
    const l = {
      type: "link",
      raw: i,
      href: g,
      title: W,
      text: I,
      tokens: Z.inlineTokens(I)
    };
    return Z.state.inLink = !1, l;
  }
  return {
    type: "image",
    raw: i,
    href: g,
    title: W,
    text: V(I)
  };
}
function Tb(d, b) {
  const i = d.match(/^(\s+)(?:```)/);
  if (i === null)
    return b;
  const Z = i[1];
  return b.split(`
`).map((g) => {
    const W = g.match(/^\s+/);
    if (W === null)
      return g;
    const [I] = W;
    return I.length >= Z.length ? g.slice(Z.length) : g;
  }).join(`
`);
}
class T {
  constructor(b) {
    this.options = b || A;
  }
  space(b) {
    const i = this.rules.block.newline.exec(b);
    if (i && i[0].length > 0)
      return {
        type: "space",
        raw: i[0]
      };
  }
  code(b) {
    const i = this.rules.block.code.exec(b);
    if (i) {
      const Z = i[0].replace(/^ {1,4}/gm, "");
      return {
        type: "code",
        raw: i[0],
        codeBlockStyle: "indented",
        text: this.options.pedantic ? Z : M(Z, `
`)
      };
    }
  }
  fences(b) {
    const i = this.rules.block.fences.exec(b);
    if (i) {
      const Z = i[0], g = Tb(Z, i[3] || "");
      return {
        type: "code",
        raw: Z,
        lang: i[2] ? i[2].trim().replace(this.rules.inline._escapes, "$1") : i[2],
        text: g
      };
    }
  }
  heading(b) {
    const i = this.rules.block.heading.exec(b);
    if (i) {
      let Z = i[2].trim();
      if (/#$/.test(Z)) {
        const g = M(Z, "#");
        (this.options.pedantic || !g || / $/.test(g)) && (Z = g.trim());
      }
      return {
        type: "heading",
        raw: i[0],
        depth: i[1].length,
        text: Z,
        tokens: this.lexer.inline(Z)
      };
    }
  }
  hr(b) {
    const i = this.rules.block.hr.exec(b);
    if (i)
      return {
        type: "hr",
        raw: i[0]
      };
  }
  blockquote(b) {
    const i = this.rules.block.blockquote.exec(b);
    if (i) {
      const Z = i[0].replace(/^ *>[ \t]?/gm, "");
      return {
        type: "blockquote",
        raw: i[0],
        tokens: this.lexer.blockTokens(Z, []),
        text: Z
      };
    }
  }
  list(b) {
    let i = this.rules.block.list.exec(b);
    if (i) {
      let Z, g, W, I, l, t, B, G, o, a, c, k, N = i[1].trim();
      const J = N.length > 1, s = {
        type: "list",
        raw: "",
        ordered: J,
        start: J ? +N.slice(0, -1) : "",
        loose: !1,
        items: []
      };
      N = J ? `\\d{1,9}\\${N.slice(-1)}` : `\\${N}`, this.options.pedantic && (N = J ? N : "[*+-]");
      const Y = new RegExp(`^( {0,3}${N})((?:[	 ][^\\n]*)?(?:\\n|$))`);
      for (; b && (k = !1, !(!(i = Y.exec(b)) || this.rules.block.hr.test(b))); ) {
        if (Z = i[0], b = b.substring(Z.length), G = i[2].split(`
`, 1)[0], o = b.split(`
`, 1)[0], this.options.pedantic ? (I = 2, c = G.trimLeft()) : (I = i[2].search(/[^ ]/), I = I > 4 ? 1 : I, c = G.slice(I), I += i[1].length), t = !1, !G && /^ *$/.test(o) && (Z += o + `
`, b = b.substring(o.length + 1), k = !0), !k) {
          const p = new RegExp(`^ {0,${Math.min(3, I - 1)}}(?:[*+-]|\\d{1,9}[.)])((?: [^\\n]*)?(?:\\n|$))`), h = new RegExp(`^ {0,${Math.min(3, I - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`), w = new RegExp(`^ {0,${Math.min(3, I - 1)}}(?:\`\`\`|~~~)`), Q = new RegExp(`^ {0,${Math.min(3, I - 1)}}#`);
          for (; b && (a = b.split(`
`, 1)[0], G = a, this.options.pedantic && (G = G.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ")), !(w.test(G) || Q.test(G) || p.test(G) || h.test(b))); ) {
            if (G.search(/[^ ]/) >= I || !G.trim())
              c += `
` + G.slice(I);
            else if (!t)
              c += `
` + G;
            else
              break;
            !t && !G.trim() && (t = !0), Z += a + `
`, b = b.substring(a.length + 1);
          }
        }
        s.loose || (B ? s.loose = !0 : /\n *\n *$/.test(Z) && (B = !0)), this.options.gfm && (g = /^\[[ xX]\] /.exec(c), g && (W = g[0] !== "[ ] ", c = c.replace(/^\[[ xX]\] +/, ""))), s.items.push({
          type: "list_item",
          raw: Z,
          task: !!g,
          checked: W,
          loose: !1,
          text: c
        }), s.raw += Z;
      }
      s.items[s.items.length - 1].raw = Z.trimRight(), s.items[s.items.length - 1].text = c.trimRight(), s.raw = s.raw.trimRight();
      const O = s.items.length;
      for (l = 0; l < O; l++) {
        this.lexer.state.top = !1, s.items[l].tokens = this.lexer.blockTokens(s.items[l].text, []);
        const p = s.items[l].tokens.filter((w) => w.type === "space"), h = p.every((w) => {
          const Q = w.raw.split("");
          let X = 0;
          for (const _ of Q)
            if (_ === `
` && (X += 1), X > 1)
              return !0;
          return !1;
        });
        !s.loose && p.length && h && (s.loose = !0, s.items[l].loose = !0);
      }
      return s;
    }
  }
  html(b) {
    const i = this.rules.block.html.exec(b);
    if (i) {
      const Z = {
        type: "html",
        raw: i[0],
        pre: !this.options.sanitizer && (i[1] === "pre" || i[1] === "script" || i[1] === "style"),
        text: i[0]
      };
      if (this.options.sanitize) {
        const g = this.options.sanitizer ? this.options.sanitizer(i[0]) : V(i[0]);
        Z.type = "paragraph", Z.text = g, Z.tokens = this.lexer.inline(g);
      }
      return Z;
    }
  }
  def(b) {
    const i = this.rules.block.def.exec(b);
    if (i) {
      const Z = i[1].toLowerCase().replace(/\s+/g, " "), g = i[2] ? i[2].replace(/^<(.*)>$/, "$1").replace(this.rules.inline._escapes, "$1") : "", W = i[3] ? i[3].substring(1, i[3].length - 1).replace(this.rules.inline._escapes, "$1") : i[3];
      return {
        type: "def",
        tag: Z,
        raw: i[0],
        href: g,
        title: W
      };
    }
  }
  table(b) {
    const i = this.rules.block.table.exec(b);
    if (i) {
      const Z = {
        type: "table",
        header: y(i[1]).map((g) => ({ text: g })),
        align: i[2].replace(/^ *|\| *$/g, "").split(/ *\| */),
        rows: i[3] && i[3].trim() ? i[3].replace(/\n[ \t]*$/, "").split(`
`) : []
      };
      if (Z.header.length === Z.align.length) {
        Z.raw = i[0];
        let g = Z.align.length, W, I, l, t;
        for (W = 0; W < g; W++)
          /^ *-+: *$/.test(Z.align[W]) ? Z.align[W] = "right" : /^ *:-+: *$/.test(Z.align[W]) ? Z.align[W] = "center" : /^ *:-+ *$/.test(Z.align[W]) ? Z.align[W] = "left" : Z.align[W] = null;
        for (g = Z.rows.length, W = 0; W < g; W++)
          Z.rows[W] = y(Z.rows[W], Z.header.length).map((B) => ({ text: B }));
        for (g = Z.header.length, I = 0; I < g; I++)
          Z.header[I].tokens = this.lexer.inline(Z.header[I].text);
        for (g = Z.rows.length, I = 0; I < g; I++)
          for (t = Z.rows[I], l = 0; l < t.length; l++)
            t[l].tokens = this.lexer.inline(t[l].text);
        return Z;
      }
    }
  }
  lheading(b) {
    const i = this.rules.block.lheading.exec(b);
    if (i)
      return {
        type: "heading",
        raw: i[0],
        depth: i[2].charAt(0) === "=" ? 1 : 2,
        text: i[1],
        tokens: this.lexer.inline(i[1])
      };
  }
  paragraph(b) {
    const i = this.rules.block.paragraph.exec(b);
    if (i) {
      const Z = i[1].charAt(i[1].length - 1) === `
` ? i[1].slice(0, -1) : i[1];
      return {
        type: "paragraph",
        raw: i[0],
        text: Z,
        tokens: this.lexer.inline(Z)
      };
    }
  }
  text(b) {
    const i = this.rules.block.text.exec(b);
    if (i)
      return {
        type: "text",
        raw: i[0],
        text: i[0],
        tokens: this.lexer.inline(i[0])
      };
  }
  escape(b) {
    const i = this.rules.inline.escape.exec(b);
    if (i)
      return {
        type: "escape",
        raw: i[0],
        text: V(i[1])
      };
  }
  tag(b) {
    const i = this.rules.inline.tag.exec(b);
    if (i)
      return !this.lexer.state.inLink && /^<a /i.test(i[0]) ? this.lexer.state.inLink = !0 : this.lexer.state.inLink && /^<\/a>/i.test(i[0]) && (this.lexer.state.inLink = !1), !this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(i[0]) ? this.lexer.state.inRawBlock = !0 : this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(i[0]) && (this.lexer.state.inRawBlock = !1), {
        type: this.options.sanitize ? "text" : "html",
        raw: i[0],
        inLink: this.lexer.state.inLink,
        inRawBlock: this.lexer.state.inRawBlock,
        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(i[0]) : V(i[0]) : i[0]
      };
  }
  link(b) {
    const i = this.rules.inline.link.exec(b);
    if (i) {
      const Z = i[2].trim();
      if (!this.options.pedantic && /^</.test(Z)) {
        if (!/>$/.test(Z))
          return;
        const I = M(Z.slice(0, -1), "\\");
        if ((Z.length - I.length) % 2 === 0)
          return;
      } else {
        const I = Hb(i[2], "()");
        if (I > -1) {
          const t = (i[0].indexOf("!") === 0 ? 5 : 4) + i[1].length + I;
          i[2] = i[2].substring(0, I), i[0] = i[0].substring(0, t).trim(), i[3] = "";
        }
      }
      let g = i[2], W = "";
      if (this.options.pedantic) {
        const I = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(g);
        I && (g = I[1], W = I[3]);
      } else
        W = i[3] ? i[3].slice(1, -1) : "";
      return g = g.trim(), /^</.test(g) && (this.options.pedantic && !/>$/.test(Z) ? g = g.slice(1) : g = g.slice(1, -1)), z(i, {
        href: g && g.replace(this.rules.inline._escapes, "$1"),
        title: W && W.replace(this.rules.inline._escapes, "$1")
      }, i[0], this.lexer);
    }
  }
  reflink(b, i) {
    let Z;
    if ((Z = this.rules.inline.reflink.exec(b)) || (Z = this.rules.inline.nolink.exec(b))) {
      let g = (Z[2] || Z[1]).replace(/\s+/g, " ");
      if (g = i[g.toLowerCase()], !g) {
        const W = Z[0].charAt(0);
        return {
          type: "text",
          raw: W,
          text: W
        };
      }
      return z(Z, g, Z[0], this.lexer);
    }
  }
  emStrong(b, i, Z = "") {
    let g = this.rules.inline.emStrong.lDelim.exec(b);
    if (!g || g[3] && Z.match(/[\p{L}\p{N}]/u))
      return;
    const W = g[1] || g[2] || "";
    if (!W || W && (Z === "" || this.rules.inline.punctuation.exec(Z))) {
      const I = g[0].length - 1;
      let l, t, B = I, G = 0;
      const o = g[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
      for (o.lastIndex = 0, i = i.slice(-1 * b.length + I); (g = o.exec(i)) != null; ) {
        if (l = g[1] || g[2] || g[3] || g[4] || g[5] || g[6], !l)
          continue;
        if (t = l.length, g[3] || g[4]) {
          B += t;
          continue;
        } else if ((g[5] || g[6]) && I % 3 && !((I + t) % 3)) {
          G += t;
          continue;
        }
        if (B -= t, B > 0)
          continue;
        t = Math.min(t, t + B + G);
        const a = b.slice(0, I + g.index + (g[0].length - l.length) + t);
        if (Math.min(I, t) % 2) {
          const k = a.slice(1, -1);
          return {
            type: "em",
            raw: a,
            text: k,
            tokens: this.lexer.inlineTokens(k)
          };
        }
        const c = a.slice(2, -2);
        return {
          type: "strong",
          raw: a,
          text: c,
          tokens: this.lexer.inlineTokens(c)
        };
      }
    }
  }
  codespan(b) {
    const i = this.rules.inline.code.exec(b);
    if (i) {
      let Z = i[2].replace(/\n/g, " ");
      const g = /[^ ]/.test(Z), W = /^ /.test(Z) && / $/.test(Z);
      return g && W && (Z = Z.substring(1, Z.length - 1)), Z = V(Z, !0), {
        type: "codespan",
        raw: i[0],
        text: Z
      };
    }
  }
  br(b) {
    const i = this.rules.inline.br.exec(b);
    if (i)
      return {
        type: "br",
        raw: i[0]
      };
  }
  del(b) {
    const i = this.rules.inline.del.exec(b);
    if (i)
      return {
        type: "del",
        raw: i[0],
        text: i[2],
        tokens: this.lexer.inlineTokens(i[2])
      };
  }
  autolink(b, i) {
    const Z = this.rules.inline.autolink.exec(b);
    if (Z) {
      let g, W;
      return Z[2] === "@" ? (g = V(this.options.mangle ? i(Z[1]) : Z[1]), W = "mailto:" + g) : (g = V(Z[1]), W = g), {
        type: "link",
        raw: Z[0],
        text: g,
        href: W,
        tokens: [
          {
            type: "text",
            raw: g,
            text: g
          }
        ]
      };
    }
  }
  url(b, i) {
    let Z;
    if (Z = this.rules.inline.url.exec(b)) {
      let g, W;
      if (Z[2] === "@")
        g = V(this.options.mangle ? i(Z[0]) : Z[0]), W = "mailto:" + g;
      else {
        let I;
        do
          I = Z[0], Z[0] = this.rules.inline._backpedal.exec(Z[0])[0];
        while (I !== Z[0]);
        g = V(Z[0]), Z[1] === "www." ? W = "http://" + g : W = g;
      }
      return {
        type: "link",
        raw: Z[0],
        text: g,
        href: W,
        tokens: [
          {
            type: "text",
            raw: g,
            text: g
          }
        ]
      };
    }
  }
  inlineText(b, i) {
    const Z = this.rules.inline.text.exec(b);
    if (Z) {
      let g;
      return this.lexer.state.inRawBlock ? g = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(Z[0]) : V(Z[0]) : Z[0] : g = V(this.options.smartypants ? i(Z[0]) : Z[0]), {
        type: "text",
        raw: Z[0],
        text: g
      };
    }
  }
}
const C = {
  newline: /^(?: *(?:\n|$))+/,
  code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
  fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
  hr: /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,
  heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
  blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
  list: /^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,
  html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
  def: /^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,
  table: H,
  lheading: /^((?:.|\n(?!\n))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
  _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
  text: /^[^\n]+/
};
C._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
C._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
C.def = R(C.def).replace("label", C._label).replace("title", C._title).getRegex();
C.bullet = /(?:[*+-]|\d{1,9}[.)])/;
C.listItemStart = R(/^( *)(bull) */).replace("bull", C.bullet).getRegex();
C.list = R(C.list).replace(/bull/g, C.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + C.def.source + ")").getRegex();
C._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
C._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
C.html = R(C.html, "i").replace("comment", C._comment).replace("tag", C._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
C.paragraph = R(C._paragraph).replace("hr", C.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", C._tag).getRegex();
C.blockquote = R(C.blockquote).replace("paragraph", C.paragraph).getRegex();
C.normal = n({}, C);
C.gfm = n({}, C.normal, {
  table: "^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
});
C.gfm.table = R(C.gfm.table).replace("hr", C.hr).replace("heading", " {0,3}#{1,6} ").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", C._tag).getRegex();
C.gfm.paragraph = R(C._paragraph).replace("hr", C.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("table", C.gfm.table).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", C._tag).getRegex();
C.pedantic = n({}, C.normal, {
  html: R(
    `^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`
  ).replace("comment", C._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
  heading: /^(#{1,6})(.*)(?:\n+|$)/,
  fences: H,
  lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
  paragraph: R(C.normal._paragraph).replace("hr", C.hr).replace("heading", ` *#{1,6} *[^
]`).replace("lheading", C.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
});
const m = {
  escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
  autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
  url: H,
  tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
  link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
  reflink: /^!?\[(label)\]\[(ref)\]/,
  nolink: /^!?\[(ref)\](?:\[\])?/,
  reflinkSearch: "reflink|nolink(?!\\()",
  emStrong: {
    lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
    rDelimAst: /^(?:[^_*\\]|\\.)*?\_\_(?:[^_*\\]|\\.)*?\*(?:[^_*\\]|\\.)*?(?=\_\_)|(?:[^*\\]|\\.)+(?=[^*])|[punct_](\*+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|(?:[^punct*_\s\\]|\\.)(\*+)(?=[^punct*_\s])/,
    rDelimUnd: /^(?:[^_*\\]|\\.)*?\*\*(?:[^_*\\]|\\.)*?\_(?:[^_*\\]|\\.)*?(?=\*\*)|(?:[^_\\]|\\.)+(?=[^_])|[punct*](\_+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/
  },
  code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
  br: /^( {2,}|\\)\n(?!\s*$)/,
  del: H,
  text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
  punctuation: /^([\spunctuation])/
};
m._punctuation = "!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~";
m.punctuation = R(m.punctuation).replace(/punctuation/g, m._punctuation).getRegex();
m.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
m.escapedEmSt = /(?:^|[^\\])(?:\\\\)*\\[*_]/g;
m._comment = R(C._comment).replace("(?:-->|$)", "-->").getRegex();
m.emStrong.lDelim = R(m.emStrong.lDelim).replace(/punct/g, m._punctuation).getRegex();
m.emStrong.rDelimAst = R(m.emStrong.rDelimAst, "g").replace(/punct/g, m._punctuation).getRegex();
m.emStrong.rDelimUnd = R(m.emStrong.rDelimUnd, "g").replace(/punct/g, m._punctuation).getRegex();
m._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
m._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
m._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
m.autolink = R(m.autolink).replace("scheme", m._scheme).replace("email", m._email).getRegex();
m._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
m.tag = R(m.tag).replace("comment", m._comment).replace("attribute", m._attribute).getRegex();
m._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
m._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
m._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
m.link = R(m.link).replace("label", m._label).replace("href", m._href).replace("title", m._title).getRegex();
m.reflink = R(m.reflink).replace("label", m._label).replace("ref", C._label).getRegex();
m.nolink = R(m.nolink).replace("ref", C._label).getRegex();
m.reflinkSearch = R(m.reflinkSearch, "g").replace("reflink", m.reflink).replace("nolink", m.nolink).getRegex();
m.normal = n({}, m);
m.pedantic = n({}, m.normal, {
  strong: {
    start: /^__|\*\*/,
    middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
    endAst: /\*\*(?!\*)/g,
    endUnd: /__(?!_)/g
  },
  em: {
    start: /^_|\*/,
    middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
    endAst: /\*(?!\*)/g,
    endUnd: /_(?!_)/g
  },
  link: R(/^!?\[(label)\]\((.*?)\)/).replace("label", m._label).getRegex(),
  reflink: R(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", m._label).getRegex()
});
m.gfm = n({}, m.normal, {
  escape: R(m.escape).replace("])", "~|])").getRegex(),
  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
  url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
  _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
  del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
  text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
});
m.gfm.url = R(m.gfm.url, "i").replace("email", m.gfm._extended_email).getRegex();
m.breaks = n({}, m.gfm, {
  br: R(m.br).replace("{2,}", "*").getRegex(),
  text: R(m.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
});
function ub(d) {
  return d.replace(/---/g, "\u2014").replace(/--/g, "\u2013").replace(/(^|[-\u2014/(\[{"\s])'/g, "$1\u2018").replace(/'/g, "\u2019").replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1\u201C").replace(/"/g, "\u201D").replace(/\.{3}/g, "\u2026");
}
function j(d) {
  let b = "", i, Z;
  const g = d.length;
  for (i = 0; i < g; i++)
    Z = d.charCodeAt(i), Math.random() > 0.5 && (Z = "x" + Z.toString(16)), b += "&#" + Z + ";";
  return b;
}
class U {
  constructor(b) {
    this.tokens = [], this.tokens.links = /* @__PURE__ */ Object.create(null), this.options = b || A, this.options.tokenizer = this.options.tokenizer || new T(), this.tokenizer = this.options.tokenizer, this.tokenizer.options = this.options, this.tokenizer.lexer = this, this.inlineQueue = [], this.state = {
      inLink: !1,
      inRawBlock: !1,
      top: !0
    };
    const i = {
      block: C.normal,
      inline: m.normal
    };
    this.options.pedantic ? (i.block = C.pedantic, i.inline = m.pedantic) : this.options.gfm && (i.block = C.gfm, this.options.breaks ? i.inline = m.breaks : i.inline = m.gfm), this.tokenizer.rules = i;
  }
  static get rules() {
    return {
      block: C,
      inline: m
    };
  }
  static lex(b, i) {
    return new U(i).lex(b);
  }
  static lexInline(b, i) {
    return new U(i).inlineTokens(b);
  }
  lex(b) {
    b = b.replace(/\r\n|\r/g, `
`), this.blockTokens(b, this.tokens);
    let i;
    for (; i = this.inlineQueue.shift(); )
      this.inlineTokens(i.src, i.tokens);
    return this.tokens;
  }
  blockTokens(b, i = []) {
    this.options.pedantic ? b = b.replace(/\t/g, "    ").replace(/^ +$/gm, "") : b = b.replace(/^( *)(\t+)/gm, (l, t, B) => t + "    ".repeat(B.length));
    let Z, g, W, I;
    for (; b; )
      if (!(this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((l) => (Z = l.call({ lexer: this }, b, i)) ? (b = b.substring(Z.raw.length), i.push(Z), !0) : !1))) {
        if (Z = this.tokenizer.space(b)) {
          b = b.substring(Z.raw.length), Z.raw.length === 1 && i.length > 0 ? i[i.length - 1].raw += `
` : i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.code(b)) {
          b = b.substring(Z.raw.length), g = i[i.length - 1], g && (g.type === "paragraph" || g.type === "text") ? (g.raw += `
` + Z.raw, g.text += `
` + Z.text, this.inlineQueue[this.inlineQueue.length - 1].src = g.text) : i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.fences(b)) {
          b = b.substring(Z.raw.length), i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.heading(b)) {
          b = b.substring(Z.raw.length), i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.hr(b)) {
          b = b.substring(Z.raw.length), i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.blockquote(b)) {
          b = b.substring(Z.raw.length), i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.list(b)) {
          b = b.substring(Z.raw.length), i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.html(b)) {
          b = b.substring(Z.raw.length), i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.def(b)) {
          b = b.substring(Z.raw.length), g = i[i.length - 1], g && (g.type === "paragraph" || g.type === "text") ? (g.raw += `
` + Z.raw, g.text += `
` + Z.raw, this.inlineQueue[this.inlineQueue.length - 1].src = g.text) : this.tokens.links[Z.tag] || (this.tokens.links[Z.tag] = {
            href: Z.href,
            title: Z.title
          });
          continue;
        }
        if (Z = this.tokenizer.table(b)) {
          b = b.substring(Z.raw.length), i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.lheading(b)) {
          b = b.substring(Z.raw.length), i.push(Z);
          continue;
        }
        if (W = b, this.options.extensions && this.options.extensions.startBlock) {
          let l = 1 / 0;
          const t = b.slice(1);
          let B;
          this.options.extensions.startBlock.forEach(function(G) {
            B = G.call({ lexer: this }, t), typeof B == "number" && B >= 0 && (l = Math.min(l, B));
          }), l < 1 / 0 && l >= 0 && (W = b.substring(0, l + 1));
        }
        if (this.state.top && (Z = this.tokenizer.paragraph(W))) {
          g = i[i.length - 1], I && g.type === "paragraph" ? (g.raw += `
` + Z.raw, g.text += `
` + Z.text, this.inlineQueue.pop(), this.inlineQueue[this.inlineQueue.length - 1].src = g.text) : i.push(Z), I = W.length !== b.length, b = b.substring(Z.raw.length);
          continue;
        }
        if (Z = this.tokenizer.text(b)) {
          b = b.substring(Z.raw.length), g = i[i.length - 1], g && g.type === "text" ? (g.raw += `
` + Z.raw, g.text += `
` + Z.text, this.inlineQueue.pop(), this.inlineQueue[this.inlineQueue.length - 1].src = g.text) : i.push(Z);
          continue;
        }
        if (b) {
          const l = "Infinite loop on byte: " + b.charCodeAt(0);
          if (this.options.silent) {
            console.error(l);
            break;
          } else
            throw new Error(l);
        }
      }
    return this.state.top = !0, i;
  }
  inline(b, i = []) {
    return this.inlineQueue.push({ src: b, tokens: i }), i;
  }
  inlineTokens(b, i = []) {
    let Z, g, W, I = b, l, t, B;
    if (this.tokens.links) {
      const G = Object.keys(this.tokens.links);
      if (G.length > 0)
        for (; (l = this.tokenizer.rules.inline.reflinkSearch.exec(I)) != null; )
          G.includes(l[0].slice(l[0].lastIndexOf("[") + 1, -1)) && (I = I.slice(0, l.index) + "[" + S("a", l[0].length - 2) + "]" + I.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex));
    }
    for (; (l = this.tokenizer.rules.inline.blockSkip.exec(I)) != null; )
      I = I.slice(0, l.index) + "[" + S("a", l[0].length - 2) + "]" + I.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
    for (; (l = this.tokenizer.rules.inline.escapedEmSt.exec(I)) != null; )
      I = I.slice(0, l.index + l[0].length - 2) + "++" + I.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex), this.tokenizer.rules.inline.escapedEmSt.lastIndex--;
    for (; b; )
      if (t || (B = ""), t = !1, !(this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((G) => (Z = G.call({ lexer: this }, b, i)) ? (b = b.substring(Z.raw.length), i.push(Z), !0) : !1))) {
        if (Z = this.tokenizer.escape(b)) {
          b = b.substring(Z.raw.length), i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.tag(b)) {
          b = b.substring(Z.raw.length), g = i[i.length - 1], g && Z.type === "text" && g.type === "text" ? (g.raw += Z.raw, g.text += Z.text) : i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.link(b)) {
          b = b.substring(Z.raw.length), i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.reflink(b, this.tokens.links)) {
          b = b.substring(Z.raw.length), g = i[i.length - 1], g && Z.type === "text" && g.type === "text" ? (g.raw += Z.raw, g.text += Z.text) : i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.emStrong(b, I, B)) {
          b = b.substring(Z.raw.length), i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.codespan(b)) {
          b = b.substring(Z.raw.length), i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.br(b)) {
          b = b.substring(Z.raw.length), i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.del(b)) {
          b = b.substring(Z.raw.length), i.push(Z);
          continue;
        }
        if (Z = this.tokenizer.autolink(b, j)) {
          b = b.substring(Z.raw.length), i.push(Z);
          continue;
        }
        if (!this.state.inLink && (Z = this.tokenizer.url(b, j))) {
          b = b.substring(Z.raw.length), i.push(Z);
          continue;
        }
        if (W = b, this.options.extensions && this.options.extensions.startInline) {
          let G = 1 / 0;
          const o = b.slice(1);
          let a;
          this.options.extensions.startInline.forEach(function(c) {
            a = c.call({ lexer: this }, o), typeof a == "number" && a >= 0 && (G = Math.min(G, a));
          }), G < 1 / 0 && G >= 0 && (W = b.substring(0, G + 1));
        }
        if (Z = this.tokenizer.inlineText(W, ub)) {
          b = b.substring(Z.raw.length), Z.raw.slice(-1) !== "_" && (B = Z.raw.slice(-1)), t = !0, g = i[i.length - 1], g && g.type === "text" ? (g.raw += Z.raw, g.text += Z.text) : i.push(Z);
          continue;
        }
        if (b) {
          const G = "Infinite loop on byte: " + b.charCodeAt(0);
          if (this.options.silent) {
            console.error(G);
            break;
          } else
            throw new Error(G);
        }
      }
    return i;
  }
}
class u {
  constructor(b) {
    this.options = b || A;
  }
  code(b, i, Z) {
    const g = (i || "").match(/\S*/)[0];
    if (this.options.highlight) {
      const W = this.options.highlight(b, g);
      W != null && W !== b && (Z = !0, b = W);
    }
    return b = b.replace(/\n$/, "") + `
`, g ? '<pre><code class="' + this.options.langPrefix + V(g) + '">' + (Z ? b : V(b, !0)) + `</code></pre>
` : "<pre><code>" + (Z ? b : V(b, !0)) + `</code></pre>
`;
  }
  blockquote(b) {
    return `<blockquote>
${b}</blockquote>
`;
  }
  html(b) {
    return b;
  }
  heading(b, i, Z, g) {
    if (this.options.headerIds) {
      const W = this.options.headerPrefix + g.slug(Z);
      return `<h${i} id="${W}">${b}</h${i}>
`;
    }
    return `<h${i}>${b}</h${i}>
`;
  }
  hr() {
    return this.options.xhtml ? `<hr/>
` : `<hr>
`;
  }
  list(b, i, Z) {
    const g = i ? "ol" : "ul", W = i && Z !== 1 ? ' start="' + Z + '"' : "";
    return "<" + g + W + `>
` + b + "</" + g + `>
`;
  }
  listitem(b) {
    return `<li>${b}</li>
`;
  }
  checkbox(b) {
    return "<input " + (b ? 'checked="" ' : "") + 'disabled="" type="checkbox"' + (this.options.xhtml ? " /" : "") + "> ";
  }
  paragraph(b) {
    return `<p>${b}</p>
`;
  }
  table(b, i) {
    return i && (i = `<tbody>${i}</tbody>`), `<table>
<thead>
` + b + `</thead>
` + i + `</table>
`;
  }
  tablerow(b) {
    return `<tr>
${b}</tr>
`;
  }
  tablecell(b, i) {
    const Z = i.header ? "th" : "td";
    return (i.align ? `<${Z} align="${i.align}">` : `<${Z}>`) + b + `</${Z}>
`;
  }
  strong(b) {
    return `<strong>${b}</strong>`;
  }
  em(b) {
    return `<em>${b}</em>`;
  }
  codespan(b) {
    return `<code>${b}</code>`;
  }
  br() {
    return this.options.xhtml ? "<br/>" : "<br>";
  }
  del(b) {
    return `<del>${b}</del>`;
  }
  link(b, i, Z) {
    if (b = D(this.options.sanitize, this.options.baseUrl, b), b === null)
      return Z;
    let g = '<a href="' + b + '"';
    return i && (g += ' title="' + i + '"'), g += ">" + Z + "</a>", g;
  }
  image(b, i, Z) {
    if (b = D(this.options.sanitize, this.options.baseUrl, b), b === null)
      return Z;
    let g = `<img src="${b}" alt="${Z}"`;
    return i && (g += ` title="${i}"`), g += this.options.xhtml ? "/>" : ">", g;
  }
  text(b) {
    return b;
  }
}
class q {
  strong(b) {
    return b;
  }
  em(b) {
    return b;
  }
  codespan(b) {
    return b;
  }
  del(b) {
    return b;
  }
  html(b) {
    return b;
  }
  text(b) {
    return b;
  }
  link(b, i, Z) {
    return "" + Z;
  }
  image(b, i, Z) {
    return "" + Z;
  }
  br() {
    return "";
  }
}
class P {
  constructor() {
    this.seen = {};
  }
  serialize(b) {
    return b.toLowerCase().trim().replace(/<[!\/a-z].*?>/ig, "").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, "").replace(/\s/g, "-");
  }
  getNextSafeSlug(b, i) {
    let Z = b, g = 0;
    if (this.seen.hasOwnProperty(Z)) {
      g = this.seen[b];
      do
        g++, Z = b + "-" + g;
      while (this.seen.hasOwnProperty(Z));
    }
    return i || (this.seen[b] = g, this.seen[Z] = 0), Z;
  }
  slug(b, i = {}) {
    const Z = this.serialize(b);
    return this.getNextSafeSlug(Z, i.dryrun);
  }
}
class F {
  constructor(b) {
    this.options = b || A, this.options.renderer = this.options.renderer || new u(), this.renderer = this.options.renderer, this.renderer.options = this.options, this.textRenderer = new q(), this.slugger = new P();
  }
  static parse(b, i) {
    return new F(i).parse(b);
  }
  static parseInline(b, i) {
    return new F(i).parseInline(b);
  }
  parse(b, i = !0) {
    let Z = "", g, W, I, l, t, B, G, o, a, c, k, N, J, s, Y, O, p, h, w;
    const Q = b.length;
    for (g = 0; g < Q; g++) {
      if (c = b[g], this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[c.type] && (w = this.options.extensions.renderers[c.type].call({ parser: this }, c), w !== !1 || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(c.type))) {
        Z += w || "";
        continue;
      }
      switch (c.type) {
        case "space":
          continue;
        case "hr": {
          Z += this.renderer.hr();
          continue;
        }
        case "heading": {
          Z += this.renderer.heading(
            this.parseInline(c.tokens),
            c.depth,
            E(this.parseInline(c.tokens, this.textRenderer)),
            this.slugger
          );
          continue;
        }
        case "code": {
          Z += this.renderer.code(
            c.text,
            c.lang,
            c.escaped
          );
          continue;
        }
        case "table": {
          for (o = "", G = "", l = c.header.length, W = 0; W < l; W++)
            G += this.renderer.tablecell(
              this.parseInline(c.header[W].tokens),
              { header: !0, align: c.align[W] }
            );
          for (o += this.renderer.tablerow(G), a = "", l = c.rows.length, W = 0; W < l; W++) {
            for (B = c.rows[W], G = "", t = B.length, I = 0; I < t; I++)
              G += this.renderer.tablecell(
                this.parseInline(B[I].tokens),
                { header: !1, align: c.align[I] }
              );
            a += this.renderer.tablerow(G);
          }
          Z += this.renderer.table(o, a);
          continue;
        }
        case "blockquote": {
          a = this.parse(c.tokens), Z += this.renderer.blockquote(a);
          continue;
        }
        case "list": {
          for (k = c.ordered, N = c.start, J = c.loose, l = c.items.length, a = "", W = 0; W < l; W++)
            Y = c.items[W], O = Y.checked, p = Y.task, s = "", Y.task && (h = this.renderer.checkbox(O), J ? Y.tokens.length > 0 && Y.tokens[0].type === "paragraph" ? (Y.tokens[0].text = h + " " + Y.tokens[0].text, Y.tokens[0].tokens && Y.tokens[0].tokens.length > 0 && Y.tokens[0].tokens[0].type === "text" && (Y.tokens[0].tokens[0].text = h + " " + Y.tokens[0].tokens[0].text)) : Y.tokens.unshift({
              type: "text",
              text: h
            }) : s += h), s += this.parse(Y.tokens, J), a += this.renderer.listitem(s, p, O);
          Z += this.renderer.list(a, k, N);
          continue;
        }
        case "html": {
          Z += this.renderer.html(c.text);
          continue;
        }
        case "paragraph": {
          Z += this.renderer.paragraph(this.parseInline(c.tokens));
          continue;
        }
        case "text": {
          for (a = c.tokens ? this.parseInline(c.tokens) : c.text; g + 1 < Q && b[g + 1].type === "text"; )
            c = b[++g], a += `
` + (c.tokens ? this.parseInline(c.tokens) : c.text);
          Z += i ? this.renderer.paragraph(a) : a;
          continue;
        }
        default: {
          const X = 'Token with "' + c.type + '" type was not found.';
          if (this.options.silent) {
            console.error(X);
            return;
          } else
            throw new Error(X);
        }
      }
    }
    return Z;
  }
  parseInline(b, i) {
    i = i || this.renderer;
    let Z = "", g, W, I;
    const l = b.length;
    for (g = 0; g < l; g++) {
      if (W = b[g], this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[W.type] && (I = this.options.extensions.renderers[W.type].call({ parser: this }, W), I !== !1 || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(W.type))) {
        Z += I || "";
        continue;
      }
      switch (W.type) {
        case "escape": {
          Z += i.text(W.text);
          break;
        }
        case "html": {
          Z += i.html(W.text);
          break;
        }
        case "link": {
          Z += i.link(W.href, W.title, this.parseInline(W.tokens, i));
          break;
        }
        case "image": {
          Z += i.image(W.href, W.title, W.text);
          break;
        }
        case "strong": {
          Z += i.strong(this.parseInline(W.tokens, i));
          break;
        }
        case "em": {
          Z += i.em(this.parseInline(W.tokens, i));
          break;
        }
        case "codespan": {
          Z += i.codespan(W.text);
          break;
        }
        case "br": {
          Z += i.br();
          break;
        }
        case "del": {
          Z += i.del(this.parseInline(W.tokens, i));
          break;
        }
        case "text": {
          Z += i.text(W.text);
          break;
        }
        default: {
          const t = 'Token with "' + W.type + '" type was not found.';
          if (this.options.silent) {
            console.error(t);
            return;
          } else
            throw new Error(t);
        }
      }
    }
    return Z;
  }
}
function e(d, b, i) {
  if (typeof d > "u" || d === null)
    throw new Error("marked(): input parameter is undefined or null");
  if (typeof d != "string")
    throw new Error("marked(): input parameter is of type " + Object.prototype.toString.call(d) + ", string expected");
  if (typeof b == "function" && (i = b, b = null), b = n({}, e.defaults, b || {}), f(b), i) {
    const g = b.highlight;
    let W;
    try {
      W = U.lex(d, b);
    } catch (t) {
      return i(t);
    }
    const I = function(t) {
      let B;
      if (!t)
        try {
          b.walkTokens && e.walkTokens(W, b.walkTokens), B = F.parse(W, b);
        } catch (G) {
          t = G;
        }
      return b.highlight = g, t ? i(t) : i(null, B);
    };
    if (!g || g.length < 3 || (delete b.highlight, !W.length))
      return I();
    let l = 0;
    e.walkTokens(W, function(t) {
      t.type === "code" && (l++, setTimeout(() => {
        g(t.text, t.lang, function(B, G) {
          if (B)
            return I(B);
          G != null && G !== t.text && (t.text = G, t.escaped = !0), l--, l === 0 && I();
        });
      }, 0));
    }), l === 0 && I();
    return;
  }
  function Z(g) {
    if (g.message += `
Please report this to https://github.com/markedjs/marked.`, b.silent)
      return "<p>An error occurred:</p><pre>" + V(g.message + "", !0) + "</pre>";
    throw g;
  }
  try {
    const g = U.lex(d, b);
    if (b.walkTokens) {
      if (b.async)
        return Promise.all(e.walkTokens(g, b.walkTokens)).then(() => F.parse(g, b)).catch(Z);
      e.walkTokens(g, b.walkTokens);
    }
    return F.parse(g, b);
  } catch (g) {
    Z(g);
  }
}
e.options = e.setOptions = function(d) {
  return n(e.defaults, d), kb(e.defaults), e;
};
e.getDefaults = K;
e.defaults = A;
e.use = function(...d) {
  const b = e.defaults.extensions || { renderers: {}, childTokens: {} };
  d.forEach((i) => {
    const Z = n({}, i);
    if (Z.async = e.defaults.async || Z.async, i.extensions && (i.extensions.forEach((g) => {
      if (!g.name)
        throw new Error("extension name required");
      if (g.renderer) {
        const W = b.renderers[g.name];
        W ? b.renderers[g.name] = function(...I) {
          let l = g.renderer.apply(this, I);
          return l === !1 && (l = W.apply(this, I)), l;
        } : b.renderers[g.name] = g.renderer;
      }
      if (g.tokenizer) {
        if (!g.level || g.level !== "block" && g.level !== "inline")
          throw new Error("extension level must be 'block' or 'inline'");
        b[g.level] ? b[g.level].unshift(g.tokenizer) : b[g.level] = [g.tokenizer], g.start && (g.level === "block" ? b.startBlock ? b.startBlock.push(g.start) : b.startBlock = [g.start] : g.level === "inline" && (b.startInline ? b.startInline.push(g.start) : b.startInline = [g.start]));
      }
      g.childTokens && (b.childTokens[g.name] = g.childTokens);
    }), Z.extensions = b), i.renderer) {
      const g = e.defaults.renderer || new u();
      for (const W in i.renderer) {
        const I = g[W];
        g[W] = (...l) => {
          let t = i.renderer[W].apply(g, l);
          return t === !1 && (t = I.apply(g, l)), t;
        };
      }
      Z.renderer = g;
    }
    if (i.tokenizer) {
      const g = e.defaults.tokenizer || new T();
      for (const W in i.tokenizer) {
        const I = g[W];
        g[W] = (...l) => {
          let t = i.tokenizer[W].apply(g, l);
          return t === !1 && (t = I.apply(g, l)), t;
        };
      }
      Z.tokenizer = g;
    }
    if (i.walkTokens) {
      const g = e.defaults.walkTokens;
      Z.walkTokens = function(W) {
        let I = [];
        return I.push(i.walkTokens.call(this, W)), g && (I = I.concat(g.call(this, W))), I;
      };
    }
    e.setOptions(Z);
  });
};
e.walkTokens = function(d, b) {
  let i = [];
  for (const Z of d)
    switch (i = i.concat(b.call(e, Z)), Z.type) {
      case "table": {
        for (const g of Z.header)
          i = i.concat(e.walkTokens(g.tokens, b));
        for (const g of Z.rows)
          for (const W of g)
            i = i.concat(e.walkTokens(W.tokens, b));
        break;
      }
      case "list": {
        i = i.concat(e.walkTokens(Z.items, b));
        break;
      }
      default:
        e.defaults.extensions && e.defaults.extensions.childTokens && e.defaults.extensions.childTokens[Z.type] ? e.defaults.extensions.childTokens[Z.type].forEach(function(g) {
          i = i.concat(e.walkTokens(Z[g], b));
        }) : Z.tokens && (i = i.concat(e.walkTokens(Z.tokens, b)));
    }
  return i;
};
e.parseInline = function(d, b) {
  if (typeof d > "u" || d === null)
    throw new Error("marked.parseInline(): input parameter is undefined or null");
  if (typeof d != "string")
    throw new Error("marked.parseInline(): input parameter is of type " + Object.prototype.toString.call(d) + ", string expected");
  b = n({}, e.defaults, b || {}), f(b);
  try {
    const i = U.lexInline(d, b);
    return b.walkTokens && e.walkTokens(i, b.walkTokens), F.parseInline(i, b);
  } catch (i) {
    if (i.message += `
Please report this to https://github.com/markedjs/marked.`, b.silent)
      return "<p>An error occurred:</p><pre>" + V(i.message + "", !0) + "</pre>";
    throw i;
  }
};
e.Parser = F;
e.parser = F.parse;
e.Renderer = u;
e.TextRenderer = q;
e.Lexer = U;
e.lexer = U.lex;
e.Tokenizer = T;
e.Slugger = P;
e.parse = e;
e.options;
e.setOptions;
e.use;
e.walkTokens;
e.parseInline;
F.parse;
U.lex;
class Lb {
  mdToHtml(b) {
    return e.parse(b);
  }
  mdRender(b, i, Z = "github") {
    const g = document.getElementById(b);
    if (g) {
      let W = g.className.split(" ");
      if (W.push("markdown-body"), g.className = W.join(" "), g.innerHTML = e.parse(i), Z) {
        let I = document.createElement("link");
        I.setAttribute("rel", "stylesheet"), I.setAttribute("type", "text/css");
        let l = new URL((/* @__PURE__ */ Object.assign({ "./styles/arknights.css": $, "./styles/awesome-green.css": bb, "./styles/channing-cyan.css": Zb, "./styles/chinese-red.css": ib, "./styles/condensed-night-purple.css": gb, "./styles/cyanosis.css": Wb, "./styles/devui-blue.css": Ib, "./styles/fancy.css": db, "./styles/geek-black.css": lb, "./styles/github.css": mb, "./styles/greenwillow.css": tb, "./styles/healer-readable.css": Gb, "./styles/hydrogen.css": cb, "./styles/juejin.css": Cb, "./styles/jzman.css": eb, "./styles/mk-cute.css": Bb, "./styles/nico.css": ab, "./styles/orange.css": Rb, "./styles/qklhk-chocolate..css": sb, "./styles/scrolls-light.css": ob, "./styles/simplicity-green.css": Yb, "./styles/smartblue.css": Vb, "./styles/v-green.css": Nb, "./styles/vue-pro.css": nb, "./styles/vuepress..css": Fb }))[`./styles/${Z}.css`], self.location).href;
        I.setAttribute("href", l), g.appendChild(I);
      }
    } else
      throw new Error(`\u65E0\u6CD5\u83B7\u53D6${b}\u5143\u7D20\uFF01`);
  }
  setCatalog(b, i, Z = !0) {
    const g = document.getElementById(b), W = document.getElementById(i);
    let I = [];
    if (g && W) {
      let l = g.childNodes;
      (l == null ? void 0 : l.length) > 0 && l.forEach((G) => {
        ["h1", "h2", "h3"].includes(G.localName) && I.push({
          id: G.id,
          text: G.innerHTML,
          level: Number(G.nodeName.substring(1, 2)),
          type: G.nodeName
        });
      });
      const t = 18, B = 10;
      I.forEach((G) => {
        let o = document.createElement("div");
        o.innerHTML = G.text, o.style.fontSize = `${t - (G.level - 1) * 2}px`, o.style.paddingLeft = `${B * (G.level - 1)}px`, o.style.fontWeight = `${600 - (G.level - 1) * 100}`, o.style.marginBottom = `${16 - G.level * 2}}px`;
        const a = () => {
          let c = document.getElementById(G.id);
          c && c.scrollIntoView({
            behavior: "smooth",
            block: "center",
            inline: "nearest"
          });
        };
        Z && (o.style.cursor = "pointer", o.onclick = a), W.appendChild(o);
      });
    } else
      throw new Error(`\u65E0\u6CD5\u83B7\u53D6${b}/${i}\u5143\u7D20\uFF01`);
  }
}
const Db = new Lb();
export {
  Db as default
};
